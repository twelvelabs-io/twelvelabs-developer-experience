openapi: 3.1.0
info:
  title: Twelve Labs Video Understanding API
  description: |
    Use the Twelve Labs Video Understanding API to extract information from your videos and make it available to your applications. The API is organized around REST and returns responses in the JSON format. It is compatible with most programming languages, and you can also use Postman or other REST clients to send requests and view responses.
  contact:
    name: Twelve Labs Support
    email: support@twelvelabs.io
  version: 1.3.0
servers:
  - url: https://api.twelvelabs.io/v1.3
tags:
  - name: Manage indexes
  - name: Upload videos
  - name: Manage videos
  - name: Any-to-video search
  - name: Create video embeddings
  - name: Generate text from video
  - name: Create text, image, and audio embeddings
paths:
  /tasks:
    post:
      summary: Create a video indexing task
      description: |
        This method creates a video indexing task that uploads and indexes a video.
        Ensure your video meets the requirements in the [Prerequisites](/docs/upload-single-videos#prerequisites) section of the **Upload single videos** page.

        Upload options:
        - **Local file**: Use the `video_file` parameter.
        - **Publicly accessible URL**: Use the `video_url` parameter.

        **NOTES**:
        - The platform supports video URLs that can play without additional user interaction or custom video players. Ensure your URL points to the raw video file, not a web page containing the video. Links to third-party hosting sites, cloud storage services, or videos requiring extra steps to play are not supported.
        - This endpoint is rate-limited. For details, see the [Rate limits](/docs/rate-limits) page.
      operationId: create-video-indexing-task
      tags:
        - Upload videos
      requestBody:
        $ref: '#/components/requestBodies/createVideoIndexingTask'
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/multipart'
      responses:
        '200':
          $ref: '#/components/responses/createVideoIndexingTaskResponse'
        '400':
          $ref: '#/components/responses/insufficientFunds'
    get:
      summary: List video indexing tasks
      description: This method returns a list of the video indexing tasks in your account. The API returns your video indexing tasks sorted by creation date, with the newest at the top of the list.
      operationId: list-video-indexing-tasks
      tags:
        - Upload videos
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_limit'
        - $ref: '#/components/parameters/sort_by'
        - $ref: '#/components/parameters/sort_option'
        - $ref: '#/components/parameters/index_id'
        - $ref: '#/components/parameters/task_status'
        - $ref: '#/components/parameters/filename'
        - $ref: '#/components/parameters/duration'
        - $ref: '#/components/parameters/width'
        - $ref: '#/components/parameters/height'
        - $ref: '#/components/parameters/created_at'
        - $ref: '#/components/parameters/updated_at'
      responses:
        '200':
          $ref: '#/components/responses/getVideoIndexingTasksResponse'
        '400':
          $ref: '#/components/responses/genericError'
  /tasks/{task_id}:
    get:
      summary: Retrieve a video indexing task
      description: This method retrieves a video indexing task.
      operationId: retrieve-video-indexing-task
      tags:
        - Upload videos
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - name: task_id
          in: path
          description: |
            The unique identifier of the video indexing task to retrieve.
          required: true
          schema:
            type: string
          example: 6298d673f1090f1100476d4c
      responses:
        '200':
          $ref: '#/components/responses/getVideoIndexingTaskResponse'
        '400':
          $ref: '#/components/responses/genericError'
    delete:
      summary: Delete a video indexing task
      description: |
        This action cannot be undone.
        Note the following about deleting a video indexing task:
        - You can only delete video indexing tasks for which the status is `ready` or `failed`.
        - If the status of your video indexing task is `ready`, you must first delete the video vector associated with your video indexing task by calling the [`DELETE`](/reference/delete-video-information) method of the `/indexes/videos` endpoint.
      operationId: delete-video-indexing-task
      tags:
        - Upload videos
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - name: task_id
          in: path
          description: |
            The unique identifier of the video indexing task you want to delete.
          required: true
          schema:
            type: string
          example: 6298d673f1090f1100476d4c
      responses:
        '204':
          $ref: '#/components/responses/noContentResponse'
        '400':
          $ref: '#/components/responses/genericError'
  /tasks/transfers/import/{integration-id}:
    post:
      summary: Import videos
      description: |
        An import represents the process of uploading and indexing all videos from the specified integration. This method initiates an asynchronous import and returns two lists:
        - Videos that will be imported.
        - Videos that will not be imported, typically due to unmet [prerequisites](/docs/upload-single-videos#prerequisites).

        The actual uploading and indexing of videos occur asynchronously after you invoke this method. To monitor the status of each upload after invoking this method, use the [Retrieve import status](/reference/cloud-to-cloud-retrieve-status) method.

        **NOTES**:
        - Before importing videos, you must set up an integration. For details, see the [Set up an integration](/docs/upload-cloud#set-up-an-integration) section.
        - The videos you wish to upload must meet the requirements in the [Prerequisites](/docs/upload-single-videos#prerequisites) section of the **Upload single videos** page.
        - By default, the platform checks for duplicate files using hashes within the target index and will not upload the same video to the same index twice. However, the same video can exist in multiple indexes. To bypass duplicate checking entirely and import duplicate videos into the same index, set the value of the `incremental_import` parameter to `false`.
        - Only one import job can run at a time. To start a new import, wait for the current job to complete. Use the [`GET`](/reference/cloud-to-cloud-retrieve-import-logs) method of the `/tasks/transfers/import/{integration-id}/logs` endpoint to retrieve a list of your import jobs, including their creation time, completion time, and processing status for each video file.
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - name: integration-id
          description: The unique identifier of the integration for which you want to import videos. You can retrieve it from the [Integrations](https://playground.twelvelabs.io/dashboard/integrations) page.
          in: path
          required: true
          schema:
            type: string
          example: 6298d673f1090f1100476d4c
      operationId: cloud-to-cloud-import-videos
      requestBody:
        $ref: '#/components/requestBodies/cloud-to-cloud-import-videos-request'
      tags:
        - Upload videos
      responses:
        '201':
          $ref: '#/components/responses/cloud-to-cloud-import-videos-response'
        '400':
          $ref: '#/components/responses/genericError'
  /tasks/transfers/import/{integration-id}/status:
    get:
      summary: Retrieve import status
      description: This method retrieves the current status for each video from a specified integration and index. It returns an object containing lists of videos grouped by status. See the [Task object](/reference/the-task-object) page for details on each status.
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - name: integration-id
          description: The unique identifier of the integration for which you want to retrieve the status of your imported videos. You can retrieve it from the [Integrations](https://playground.twelvelabs.io/dashboard/integrations) page.
          in: path
          required: true
          schema:
            type: string
          example: 6298d673f1090f1100476d4c
        - name: index_id
          in: query
          description: |
            The unique identifier of the index for which you want to retrieve the status of your imported videos.
          required: true
          schema:
            type: string
          example: 6298d673f1090f1100476d4c
      operationId: cloud-to-cloud-retrieve-status
      tags:
        - Upload videos
      responses:
        '200':
          $ref: '#/components/responses/cloud-to-cloud-retrieve-status-response'
        '400':
          $ref: '#/components/responses/genericError'
  /tasks/transfers/import/{integration-id}/logs:
    get:
      summary: Retrieve import logs
      description: |
        This endpoint returns a chronological list of import operations for the specified integration. The list is sorted by creation date, with the oldest imports first. Each item in the list contains:
        - The number of videos in each status
        - Detailed error information for failed uploads, including filenames and error messages.

        Use this endpoint to track import progress and troubleshoot potential issues across multiple operations.
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - name: integration-id
          in: path
          required: true
          schema:
            type: string
          example: 6298d673f1090f1100476d4c
          description: The unique identifier of the integration for which you want to retrieve the import logs. You can retrieve it from the [Integrations](https://playground.twelvelabs.io/dashboard/integrations) page.
      operationId: cloud-to-cloud-retrieve-import-logs
      tags:
        - Upload videos
      responses:
        '200':
          $ref: '#/components/responses/cloud-to-cloud-retrieve-import-logs-response'
        '400':
          $ref: '#/components/responses/genericError'
  /indexes:
    post:
      summary: Create an index
      description: |
        This method creates an index.
      operationId: create-index
      tags:
        - Manage indexes
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
      requestBody:
        $ref: '#/components/requestBodies/createIndex'
      responses:
        '201':
          $ref: '#/components/responses/createIndexResponse'
        '400':
          $ref: '#/components/responses/genericError'
    get:
      summary: List indexes
      description: |
        This method returns a list of the indexes in your account. The API returns indexes sorted by creation date, with the oldest indexes at the top of the list.
      operationId: list-indexes
      tags:
        - Manage indexes
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_limit'
        - $ref: '#/components/parameters/sort_by'
        - $ref: '#/components/parameters/sort_option'
        - name: index_name
          in: query
          description: Filter by the name of an index.
          required: false
          schema:
            type: string
          example: myIndex
        - name: model_options
          in: query
          description: |
            Filter by the model options. When filtering by multiple model options, the values must be comma-separated.
          required: false
          schema:
            type: string
          example: visual,audio
        - name: model_family
          in: query
          description: |
            Filter by the model family. This parameter can take one of the following values: `marengo` or `pegasus`. You can specify a single value.
          schema:
            type: string
          required: false
          example: marengo
        - name: created_at
          in: query
          description: |
            Filter indexes by the creation date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"). The platform returns the indexes that were created on the specified date at or after the given time.
          schema:
            type: string
          required: false
          example: '2024-08-16T16:53:59Z'
        - name: updated_at
          in: query
          description: |
            Filter indexes by the last update date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"). The platform returns the indexes that were last updated on the specified date at or after the given time.
          schema:
            type: string
          required: false
          example: '2024-08-16T16:55:59Z'
      responses:
        '200':
          $ref: '#/components/responses/getIndexesResponse'
        '400':
          $ref: '#/components/responses/genericError'
  /indexes/{index-id}:
    get:
      summary: Retrieve an index
      description: |
        This method retrieves details about the specified index.
      operationId: retrieve-index
      tags:
        - Manage indexes
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - name: index-id
          in: path
          description: |
            Unique identifier of the index to retrieve.
          required: true
          schema:
            type: string
          example: 6298d673f1090f1100476d4c
      responses:
        '200':
          $ref: '#/components/responses/getIndexResponse'
        '400':
          $ref: '#/components/responses/genericError'
    put:
      summary: Update an index
      description: |
        This method updates the name of the specified index.
      operationId: update-index
      tags:
        - Manage indexes
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - name: index-id
          in: path
          description: |
            Unique identifier of the index to update.
          required: true
          schema:
            type: string
          example: 6298d673f1090f1100476d4c
      requestBody:
        $ref: '#/components/requestBodies/updateIndex'
      responses:
        '204':
          $ref: '#/components/responses/noContentResponse'
        '400':
          $ref: '#/components/responses/genericError'
    delete:
      summary: Delete an index
      description: This method deletes the specified index and all the videos within it. This action cannot be undone.
      operationId: delete-index
      tags:
        - Manage indexes
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - name: index-id
          in: path
          description: |
            Unique identifier of the index to delete.
          required: true
          schema:
            type: string
          example: 6298d673f1090f1100476d4c
      responses:
        '204':
          $ref: '#/components/responses/noContentResponse'
        '400':
          $ref: '#/components/responses/genericError'
  /indexes/{index-id}/videos:
    get:
      summary: List videos
      operationId: list-videos
      description: |
        This method returns a list of the videos in the specified index. By default, the API returns your videos sorted by creation date, with the newest at the top of the list.
      tags:
        - Manage videos
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_limit'
        - $ref: '#/components/parameters/sort_by'
        - $ref: '#/components/parameters/sort_option'
        - name: index-id
          in: path
          description: The unique identifier of the index for which the API will retrieve the videos.
          schema:
            type: string
          required: true
          example: 6298d673f1090f1100476d4c
        - name: filename
          in: query
          description: |
            Filter by filename.
          required: false
          schema:
            type: string
          example: 01.mp4
        - name: duration
          in: query
          description: |
            Filter by duration. Expressed in seconds.
          schema:
            type: number
          example: 10
        - name: fps
          in: query
          description: |
            Filter by frames per second.
          required: false
          schema:
            type: number
          example: 25
        - name: width
          in: query
          description: |
            Filter by width.
          required: false
          schema:
            type: number
          example: 1920
        - name: height
          in: query
          description: |
            Filter by height.
          required: false
          schema:
            type: integer
          example: 1080
        - name: size
          in: query
          description: |
            Filter by size. Expressed in bytes.
          required: false
          schema:
            type: number
          example: 1048576
        - name: created_at
          in: query
          description: |
            Filter videos by the creation date and time of their associated indexing tasks, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"). The platform returns the videos whose indexing tasks were created on the specified date at or after the given time.
          required: false
          schema:
            type: string
          example: '2024-08-16T16:53:59Z'
        - name: updated_at
          in: query
          description: |
            This filter applies only to videos updated using the [`PUT`](/reference/update-video-information) method of the `/indexes/{index-id}/videos/{video-id}` endpoint. It filters videos by the last update date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"). The platform returns the video indexing tasks that were last updated on the specified date at or after the given time.
          required: false
          schema:
            type: string
          example: '2024-08-16T16:53:59Z'
        - name: indexed_at
          in: query
          description: |
            Filter videos by the completion time of their associated indexing tasks, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"). The platform returns the videos whose indexing tasks were completed on the specified date at or after the given time.
          required: false
          schema:
            type: string
          example: '2024-08-16T16:53:59Z'
        - name: user_metadata
          in: query
          description: |
            To enable filtering by custom fields, you must first add user-defined metadata to your video by calling the [`PUT`](/reference/update-video-information) method of the `/indexes/:index-id/videos/:video-id` endpoint.

            Examples:
            - To filter on a string: `?category=recentlyAdded`
            - To filter on an integer: `?batchNumber=5`
            - To filter on a float: `?rating=9.3`
            - To filter on a boolean: `?needsReview=true`
          schema:
            additionalProperties:
              oneOf:
                - type: string
                  example: recentlyAdded
                - type: number
                  example: 5
                - type: boolean
                  example: true
              example:
                category: recentlyAdded
                batchNumber: 5
                rating: 9.3
                needsReview: true
          style: form
          explode: true
          example: category=recentlyAdded&batchNumber=5&rating=9.3&needsReview=true
      responses:
        '200':
          $ref: '#/components/responses/getVideoVectorsResponse'
        '400':
          $ref: '#/components/responses/genericError'
  /indexes/{index-id}/videos/{video-id}:
    get:
      summary: Retrieve video information
      description: |
        This method retrieves information about the specified video.
      operationId: retrieve-video-information
      tags:
        - Manage videos
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - name: index-id
          in: path
          description: |
            The unique identifier of the index to which the video has been uploaded.
          required: true
          schema:
            type: string
          example: 6298d673f1090f1100476d4c
        - name: video-id
          in: path
          description: |
            The unique identifier of the video to retrieve.
          required: true
          schema:
            type: string
          example: 6298d673f1090f1100476d4c
        - name: embed
          in: query
          description: |
            Set this parameter to `true` to retrieve the video embedding in the response. The video must be indexed with the Marengo video understanding model version 2.7 or later. For details on enabling this model for an index, see the [Create an index](/reference/create-index) page.
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          $ref: '#/components/responses/getVideoVectorResponse'
        '400':
          $ref: '#/components/responses/genericError'
        '404':
          $ref: '#/components/responses/notFound'
    put:
      summary: Update video information
      description: Use this method to update the metadata of a video such as file name.
      operationId: update-video-information
      tags:
        - Manage videos
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - name: index-id
          in: path
          description: |
            The unique identifier of the index to which the video has been uploaded.
          required: true
          schema:
            type: string
          example: 6298d673f1090f1100476d4c
        - name: video-id
          in: path
          description: |
            The unique identifier of the video to update.
          required: true
          schema:
            type: string
          example: 6298d673f1090f1100476d4c
      requestBody:
        $ref: '#/components/requestBodies/update-video-vector'
      responses:
        '204':
          $ref: '#/components/responses/noContentResponse'
        '400':
          $ref: '#/components/responses/genericError'
    delete:
      summary: Delete video information
      operationId: delete-video-information
      tags:
        - Manage videos
      description: |
        This method deletes all the information about the specified video This action cannot be undone.
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - name: index-id
          in: path
          description: |
            The unique identifier of the index to which the video has been uploaded.
          required: true
          schema:
            type: string
          example: 6298d673f1090f1100476d4c
        - name: video-id
          in: path
          description: |
            The unique identifier of the video to delete.
          required: true
          schema:
            type: string
          example: 6298d673f1090f1100476d4c
      responses:
        '204':
          $ref: '#/components/responses/noContentResponse'
        '400':
          $ref: '#/components/responses/genericError'
  /summarize:
    post:
      summary: Summaries, chapters, or highlights
      description: |
        This endpoint generates summaries, chapters, or highlights for your videos. Optionally, you can provide a prompt to customize the output.

        **NOTE**: This endpoint is rate-limited. For details, see the [Rate limits](/docs/rate-limits) page.
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
      operationId: summarize
      tags:
        - Generate text from video
      requestBody:
        $ref: '#/components/requestBodies/summarizeRequest'
      responses:
        '200':
          $ref: '#/components/responses/summarizeResponse'
        '400':
          $ref: '#/components/responses/genericError'
        '429':
          description: |
            If the rate limit is reached, the platform returns an `HTTP 429 - Too many requests` error response. The response body is empty.
  /gist:
    post:
      summary: Titles, topics, and hashtags
      description: |
        This endpoint generates titles, topics, and hashtags for your videos. Those are representations of the key elements or themes of a video.

        **NOTE**: This endpoint is rate-limited. For details, see the [Rate limits](/docs/rate-limits) page.
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
      operationId: gist
      tags:
        - Generate text from video
      requestBody:
        $ref: '#/components/requestBodies/gistRequest'
      responses:
        '200':
          $ref: '#/components/responses/gistResponse'
        '400':
          $ref: '#/components/responses/genericError'
        '429':
          description: |
            If the rate limit is reached, the platform returns an `HTTP 429 - Too many requests` error response. The response body is empty.


  '/generate':
    post:
      summary: Open-ended texts
      description: |
        This endpoint generates open-ended texts based on your videos, including but not limited to tables of content, action items, memos, and detailed analyses.

        **NOTES**:
        - This endpoint is rate-limited. For details, see the [Rate limits](/docs/rate-limits) page.
        - This endpoint supports streaming responses. For details on integrating this feature into your application, refer to the [Streaming response](/docs/streaming-responses) guide.
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
      operationId: generate-text-representation
      tags:
        - Generate text from video
      requestBody:
        $ref: '#/components/requestBodies/generateTextRepresentationRequest'
      responses:
        '200':
          description: The specified video has successfully been processed.
          headers:
            X-Ratelimit-Limit:
              schema:
                type: number
              description: The maximum number of requests you can make per rate limit window for this endpoint. For details, see the [Rate limits](/docs/rate-limits) page.
              example: 100
            X-Ratelimit-Remaining:
              schema:
                type: number
              description: The number of requests remaining in the current rate limit window for the specific endpoint. This value decreases with each request you make to that endpoint and resets at the start of the next rate limit window.
              example: 99
            X-Ratelimit-Used:
              schema:
                type: number
              description: The number of requests you have made in the current rate limit window for the specific endpoint. This value increases with each request you make to that endpoint and resets to zero at the start of the next rate limit window.
              example: 1
            X-Ratelimit-Reset:
              schema:
                type: number
              description: The time at which the current rate limit window resets, expressed in UTC epoch seconds. After this time, the values of the `X-Ratelimit-Remaining` and `X-Ratelimit-Used` parameters will be reset to their initial values for the next rate limit window.
              example: 1718777276
            Transfer-Encoding:
              schema:
                type: string
                description: The platform returns this header when the `stream` parameter is set to `true` in the request. It indicates that the response body is sent in chunks. 
                default: chunked
                example: chunked
          content:
            application/json:
              schema:
                oneOf: 
                  - type: object
                    description: |
                      When the value of the `stream` parameter is set to `false`, the response is as follows:
                    title: Non-streamed response
                    properties:
                      id:
                        description: |
                          Unique identifier of the response.
                        type: string
                      data:
                        description: |
                          The generated text based on the prompt you provided.
                        type: string
                  - type: object
                    title: Streamed response
                    description: |
                      When the value of the `stream` parameter is set to `true`, the platform provides a streaming response in the NDJSON format.

                      The stream contains three types of events:
                      1. Stream start
                      2. Text generation
                      3. Stream end

                      To integrate the response into your application, follow the guidelines below:
                      - Parse each line of the response as a separate JSON object.
                      - Check the `event_type` field to determine how to handle the event.
                      - For `text_generation` events, process the `text` field as it arrives. Depending on your application's requirements, this may involve displaying the text incrementally, storing it for later use, or performing any tasks.
                      - Use the `stream_start` and `stream_end` events to manage the lifecycle of your streaming session.
                    oneOf:
                      - type: object
                        title: Stream start 
                        description: |
                          Indicates the beginning of the stream.
                        properties:
                          event_type:
                            type: string
                            description: |
                              This field is always set to `stream_start` for this event.
                          metadata:
                            type: object
                            description: An object containing metadata about the stream.
                            properties:
                              generation_id:
                                type: string
                                description: |
                                  A unique identifier for the generation session.
                      - type: object
                        title: Text generation
                        description: |
                          Contains a fragment of generated text. Note that text fragments may be split at arbitrary points, not necessarily at word or sentence boundaries.
                        properties:
                          event_type:
                            type: string
                            description: |
                              This field is always set to `text_generation` for this event.
                          text:
                            type: string
                            description: |
                              A fragment of the generated text.
                      - type: object
                        title: Stream end
                        description: |
                          Indicates the end of the stream.
                        properties:
                          event_type:
                            type: string
                            description: |
                              This field is always set to `stream_end` for this event.
                          metadata:
                            type: object
                            description: An object containing metadata about the stream.
                            properties:
                              generation_id:
                                type: string
                                description: |
                                  The same unique identifier provided in the `stream_start` event.
              examples:
                non-streaming-response:
                  summary: Non-streamed response
                  value:
                    id: 2a22fd17-7bd4-446a-abd6-b9382cb18f90
                    data: '1. Vlog\n2. Minnesota\n3. Mall of America\n4. Shopping haul\n5. Outdoor adventure'
                stream-start-response:
                  summary: Stream start
                  value:
                    event_type: stream_start
                    metadata:
                      generation_id: 2f6d0bdd-aed8-47b1-8124-3c9d8006cdc9
                text-generation-resonse:
                  summary: Text generation
                  value:
                    event_type: text_generation
                    text: light-hearted moments of cats
                stream-end-response:
                  summary: Stream end
                  value:
                    event_type: stream_end
                    metadata:
                      generation_id: 2f6d0bdd-aed8-47b1-8124-3c9d8006cdc9


        '400':
          $ref: '#/components/responses/genericError' 
        '429':
          description: |
            If the rate limit is reached, the platform returns an `HTTP 429 - Too many requests` error response. The response body is empty.
                     
          
  /embed:
    post:
      summary: Create embeddings for text, image, and audio
      description: |
        This method creates embeddings for text, image, and audio content.

        Before you create an embedding, ensure that the following prerequisites are met:
        - [Text embeddings](/docs/create-text-embeddings#prerequisites)
        - [Image embeddings](/docs/create-image-embeddings#prerequisites)
        - [Audio embeddings](/docs/create-audio-embeddings#prerequisites)

        Parameters for embeddings:
        - **Common parameters**:
          - `model_name`: The video understanding model you want to use. Example: "Marengo-retrieval-2.7".
        - **Text embeddings**:
          - `text`: Text for which to create an embedding.
        - **Image embeddings**:
          Provide one of the following:
          - `image_url`: Publicly accessible URL of your image file.
          - `image_file`:  Local image file.
        - **Audio embeddings**:
          Provide one of the following:
          - `audio_url`: Publicly accessible URL of your audio file.
          - `audio_file`: Local audio file.

        **NOTES**:
        - The "Marengo-retrieval-2.7" video understanding model generates embeddings for all modalities in the same latent space. This shared space enables any-to-any searches across different types of content.
        - You can create multiple types of embeddings in a single API call.
        - Audio embeddings combine generic sound and human speech in a single embedding. For videos with transcriptions, you can [retrieve transcriptions](/reference/retrieve-transcription) and then [create text embeddings](/reference/create-text-embedding) from these transcriptions.
      operationId: create-text-image-audio-embedding
      tags:
        - Create text, image, and audio embeddings
      requestBody:
        $ref: '#/components/requestBodies/createSyncEmbeddingRequest'
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/multipart'
      responses:
        '200':
          $ref: '#/components/responses/createSyncEmbeddingResponse'
        '400':
          $ref: '#/components/responses/genericError'
  /embed/tasks:
    post:
      summary: Create a video embedding task
      description: |
        This method creates a new video embedding task that uploads a video to the platform and creates one or multiple video embeddings.

        Ensure your video meets the requirements in the [Prerequisites](/docs/create-video-embeddings#prerequisites) section of the **Create video embeddings** page.

        Upload options:
        - **Local file**: Use the `video_file` parameter
        - **Publicly accessible URL**: Use the `video_url` parameter.

        Specify at least one option. If both are provided, `video_url` takes precedence.

        **NOTES**:
        - The "Marengo-retrieval-2.7" video understanding model generates embeddings for all modalities in the same latent space. This shared space enables any-to-any searches across different types of content.
        - Video embeddings are stored for seven days.
        - The platform supports uploading video files that can play without additional user interaction or custom video players. Ensure your URL points to the raw video file, not a web page containing the video. Links to third-party hosting sites, cloud storage services, or videos requiring extra steps to play are not supported.
      operationId: create-video-embedding-task
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/multipart'
      tags:
        - Create video embeddings
      requestBody:
        $ref: '#/components/requestBodies/createVideoEmbeddingTaskRequest'
      responses:
        '200':
          $ref: '#/components/responses/createVideoEmbeddingTaskResponse'
        '400':
          $ref: '#/components/responses/genericError'
    get:
      summary: List video embedding tasks
      description: |
        This method returns a list of the video embedding tasks in your account. The platform returns your video embedding tasks sorted by creation date, with the newest at the top of the list.

        **NOTES**:
        - Video embeddings are stored for seven days
        - When you invoke this method without specifying the `started_at` and `ended_at` parameters, the platform returns all the video embedding tasks created within the last seven days.
      operationId: list-video-embedding-tasks
      tags:
        - Create video embeddings
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/started_at'
        - $ref: '#/components/parameters/ended_at'
        - $ref: '#/components/parameters/embedding_tasks_filter_status'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_limit'
      responses:
        '200':
          $ref: '#/components/responses/listVideoEmbeddingTasksResponse'
        '400':
          $ref: '#/components/responses/genericError'
  /embed/tasks/{task_id}/status:
    get:
      summary: Retrieve the status of a video embedding task
      description: |
        This method retrieves the status of a video embedding task. Check the task status of a video embedding task to determine when you can retrieve the embedding.

        A task can have one of the following statuses:
        - `processing`: The platform is creating the embeddings.
        - `ready`:  Processing is complete. Retrieve the embeddings by invoking the [`GET`](/reference/retrieve-video-embedding) method of the `/embed/tasks/{task_id} endpoint`.
        - `failed`: The task could not be completed, and the embeddings haven't been created.
      operationId: retrieve-video-embedding-task
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - $ref: '#/components/parameters/video-embedding-task-id'
      tags:
        - Create video embeddings
      responses:
        '200':
          $ref: '#/components/responses/retrieveVideoEmbeddingTaskStatusResponse'
        '400':
          $ref: '#/components/responses/genericError'
  /embed/tasks/{task_id}:
    get:
      summary: Retrieve video embeddings
      description: |
        This method retrieves embeddings for a specific video embedding task. Ensure the task status is `ready` before invoking this method. Refer to the [Retrieve a video embedding](/reference/retrieve-video-embedding-task) task page for instructions on checking the task status.
      operationId: retrieve-video-embedding
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - $ref: '#/components/parameters/video-embedding-task-id'
      tags:
        - Create video embeddings
      responses:
        '200':
          $ref: '#/components/responses/retrieveVideoEmbeddingResponse'
        '400':
          $ref: '#/components/responses/genericError'
  /search:
    post:
      summary: Make any-to-video search requests
      description: |
        Use this endpoint to search for relevant matches in an index using text or various media queries.

        **Text queries**:
        - Use the `query_text` parameter to specify your query.

        **Media queries**:
        - Set the `query_media_type` parameter to the corresponding media type (example: `image`).
        - Specify either one of the following parameters:
          - `query_media_url`: Publicly accessible URL of your media file.
          - `query_media_file`: Local media file.
          If both `query_media_url` and `query_media_file` are specified in the same request, `query_media_url` takes precedence.

        Before using a media file as a query, ensure that the file meets the [prerequisites](/docs/single-queries-prerequisites).

        **NOTE**: This endpoint is rate-limited. For details, see the [Rate limits](/docs/rate-limits) page.
      operationId: any-to-video-search
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/multipart'
      tags:
        - Any-to-video search
      requestBody:
        $ref: '#/components/requestBodies/any-to-video-search'
      responses:
        '200':
          $ref: '#/components/responses/searchResultsResponse'
        '400':
          $ref: '#/components/responses/genericError'
        '429':
          description: |
            If the rate limit is reached, the platform returns an `HTTP 429 - Too many requests` error response. The response body is empty.
  /search/{page-token}:
    get:
      summary: Retrieve a specific page of search results
      tags:
        - Any-to-video search
      description: |
        Use this endpoint to retrieve a specific page of search results.

        **NOTE**: When you use pagination, you will not be charged for retrieving subsequent pages of results.
      operationId: any-to-video--retrieve-specific-page
      parameters:
        - $ref: '#/components/parameters/x-api-key'
        - $ref: '#/components/parameters/Content-Type'
        - name: page-token
          in: path
          required: true
          description: |
            A token that identifies the page to retrieve.
          schema:
            type: string
            example: '1234567890'
      responses:
        '200':
          $ref: '#/components/responses/searchResultsResponsePageId'
        '400':
          $ref: '#/components/responses/searchResultsError'
components:
  schemas:
    ImportLog:
      description: |
        An object that contains information about the import process.
      type: object
      properties:
        index_id:
          type: string
          description: The unique identifier of the index associated with this import.
          example: 6298d673f1090f1100476d4c
        index_name:
          type: string
          description: The name of the index associated with this import.
          example: myIndex
        created_at:
          type: string
          format: date-time
          description: The date and time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format when the import process was initiated.
          example: '2024-09-22T13:25:00Z'
        ended_at:
          type: string
          format: date-time
          description: The date and time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format, when the platform completed importing your videos. A `null` value indicates that the import process is still ongoing.
          example: '2024-09-22T13:25:00Z'
        video_status:
          type: object
          description: Counts of files in different statuses. See the [Task object](/reference/the-task-object) page for details on each status.
          properties:
            ready:
              type: integer
              example: 10
            validating:
              type: integer
              example: 2
            queued:
              type: integer
              example: 3
            pending:
              type: integer
              example: 4
            indexing:
              type: integer
              example: 5
            failed:
              type: integer
              example: 6
          required:
            - ready
            - validating
            - queued
            - pending
            - indexing
            - failed
          example:
            ready: 10
            validating: 2
            queued: 3
            pending: 4
            indexing: 5
            failed: 6
        failed_files:
          type: array
          description: An array containing the video files that failed to import, along with details about the error.
          items:
            type: object
            properties:
              filename:
                type: string
                description: The name of the video file that failed to import.
                example: 01.mp4
              error_message:
                type: string
                description: A human-readable error message.
                example: The file is not a valid video file.
                required:
                  - filename
                  - error_message
            example:
              filename: 01.mp4
              error_message: The file is not a valid video file.
          example:
            - filename: 01.mp4
              error_message: The file is not a valid video file.
      example:
        index_id: 6298d673f1090f1100476d4c
        index_name: myIndex
        created_at: '2024-09-22T13:25:00Z'
        ended_at: '2024-09-22T13:25:00Z'
        video_status:
          ready: 10
          validating: 2
          queued: 3
          pending: 4
          indexing: 5
          failed: 6
        failed_files:
          - filename: 01.mp4
            error_message: The file is not a valid video file.
    VideoItem:
      description: |
        An object that contains information about a video file.
      type: object
      properties:
        video_id:
          type: string
          description: The unique identifier of the video.
          example: 6298d673f1090f1100476d4c
        filename:
          type: string
          description: The name of the video file.
          example: 01.mp4
        created_at:
          type: string
          format: date-time
          description: The date and time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), when the video was added to the import process.
          example: '2024-09-22T13:25:00Z'
      required:
        - video_id
        - filename
        - created_at
      example:
        video_id: 6298d673f1090f1100476d4c
        filename: 01.mp4
        created_at: '2024-09-22T13:25:00Z'
    VideoItemFailed:
      description: |
        An object that contains information about a video file that failed to import.
      type: object
      properties:
        filename:
          type: string
          description: The name of the video file.
          example: 01.mp4
        created_at:
          type: string
          format: date-time
          description: The date and time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), when the video was added to the import process.
          example: '2024-09-22T13:25:00Z'
        error_message:
          type: string
          description: The error message explaining why the video failed to import.
          example: The file is not a valid video file.
      required:
        - filename
        - created_at
        - error_message
      example:
        filename: 01.mp4
        created_at: '2024-09-22T13:25:00Z'
        error_message: The file is not a valid video file.
    EmbeddingResponse:
      type: object
      description: |
        An object that contains the generated embedding vector and associated information.
      properties:
        model_name:
          type: string
          description: The name ofhe video understanding model the platform has used to create this embedding.
          example: Marengo-retrieval-2.7
      anyOf:
        - $ref: '#/components/schemas/AudioEmbeddingResponse'
        - $ref: '#/components/schemas/ImageEmbeddingResponse'
        - $ref: '#/components/schemas/TextEmbeddingResponse'
      example:
        model_name: Marengo-retrieval-2.7
        audio_embedding:
          segments:
            - float:
                - -0.042632885
                - 0.014312328
                - 0.029209055
              start_offset_sec: 0
          metadata:
            input_filename: 01.mp3
        image_embedding:
          segments:
            - float:
                - -0.042632885
                - 0.014312328
                - 0.029209055
          metadata:
            input_filename: 01.jpg
        text_embedding:
          segments:
            - float:
                - -0.042632885
                - 0.014312328
                - 0.029209055
    AudioEmbeddingResponse:
      description: |
        An object that contains the generated audio embedding vector and associated information.
      type: object
      title: Audio embedding
      properties:
        audio_embedding:
          $ref: '#/components/schemas/AudioEmbeddingResult'
      example:
        audio_embedding:
          segments:
            - start_offset_sec: 0
              float:
                - -0.042632885
                - 0.014312328
                - 0.029209055
          metadata:
            input_filename: 01.mp3
    ImageEmbeddingResponse:
      description: |
        An object that contains the generated image embedding vector and associated information.
      type: object
      title: Image embedding
      required:
        - image_embedding
      properties:
        image_embedding:
          $ref: '#/components/schemas/ImageEmbeddingResult'
      example:
        image_embedding:
          segments:
            - float:
                - -0.042632885
                - 0.014312328
                - 0.029209055
    TextEmbeddingResponse:
      description: |
        An object that contains the generated text embedding vector and associated information.
      type: object
      title: Text embedding
      required:
        - text_embedding
      properties:
        text_embedding:
          $ref: '#/components/schemas/TextEmbeddingResult'
      example:
        text_embedding:
          segments:
            - float:
                - -0.042632885
                - 0.014312328
                - 0.029209055
    TextEmbeddingResult:
      type: object
      description: An object containing the generated embedding vector.
      properties:
        error_message:
          type: string
          description: Error message if the embedding generation failed.
          example: The text is too long.
        segments:
          type: array
          description: |
            An object that contains the embedding.
          items:
            $ref: '#/components/schemas/BaseSegment'
          example:
            - float:
                - -0.042632885
                - 0.014312328
                - 0.029209055
      example:
        segments:
          - float:
              - -0.042632885
              - 0.014312328
              - 0.029209055
    AudioEmbeddingResult:
      type: object
      description: |
        An object that contains the generated embedding vector and associated information.
      properties:
        segments:
          type: array
          description: |
            An object that contains the embedding and its start time.
          items:
            $ref: '#/components/schemas/AudioSegment'
          example:
            - float:
                - -0.042632885
                - 0.014312328
                - 0.029209055
        error_message:
          type: string
          description: Error message if the embedding generation failed.
          example: Audio file is not valid.
        metadata:
          $ref: '#/components/schemas/BaseEmbeddingMetadata'
      example:
        segments:
          - float:
              - -0.042632885
              - 0.014312328
              - 0.029209055
        error_message: Audio file is not valid.
        metadata:
          input_url: https://example.com/audio.mp3
          input_filename: 01.mp3
    ImageEmbeddingResult:
      type: object
      description: An object containing the generated embedding vector and associated information.
      properties:
        error_message:
          type: string
          description: Error message if the embedding generation failed.
          example: Image file is not valid.
        segments:
          type: array
          description: |
            An object that contains the embedding.
          items:
            $ref: '#/components/schemas/BaseSegment'
          example:
            - float:
                - -0.042632885
                - 0.014312328
                - 0.029209055
        metadata:
          $ref: '#/components/schemas/BaseEmbeddingMetadata'
      example:
        segments:
          - float:
              - -0.042632885
              - 0.014312328
              - 0.029209055
    BaseEmbeddingMetadata:
      description: |
        Metadata about the embedding.
      type: object
      properties:
        input_url:
          type: string
          description: |
            The URL of the media file used to generate the embedding. Present if a URL was provided in the request.
          example: https://example.com/audio.mp3
        input_filename:
          type: string
          description: |
            The name of the media file used to generate the embedding. Present if a file was provided in the request.
          example: 01.mp3
      example:
        input_url: https://example.com/audio.mp3
        input_filename: 01.mp3
    BaseSegment:
      description: |
        An object that contains the embedding value of a segment.
      type: object
      properties:
        float:
          type: array
          description: An array of floating point numbers representing the embedding. You can use this array with cosine similarity for various downstream tasks. Note that the example response was truncated for brevity.
          items:
            type: number
            format: float
            example: 0.042632885
          example:
            - 0.042632885
            - 0.014312328
            - 0.029209055
      example:
        float:
          - 0.042632885
          - 0.014312328
          - 0.029209055
    AudioSegment:
      description: |
        An object that contains the audio embedding and its start time.
      allOf:
        - $ref: '#/components/schemas/BaseSegment'
        - type: object
          properties:
            start_offset_sec:
              type: number
              description: The start time, in seconds, from which the platform generated the audio embedding.
              example: 0
          example:
            float:
              - 0.042632885
              - 0.014312328
              - 0.029209055
            start_offset_sec: 0
    VideoSegment:
      description: |
        An object that contains the video embedding and its start time.
      allOf:
        - $ref: '#/components/schemas/AudioSegment'
        - type: object
          properties:
            end_offset_sec:
              type: number
              description: The end time, in seconds, from which the platform generated the video embedding.
              example: 6
            embedding_scope:
              type: string
              description: The scope of the video embedding.
              example: clip
          example:
            float:
              - 0.042632885
              - 0.014312328
              - 0.029209055
            end_offset_sec: 6
            embedding_scope: clip
    EndTime:
      type: number
      description: |
        The end time of the matching video clip, expressed in seconds.
      example: 60
    StartTime:
      type: number
      description: |
        The start time of the matching video clip, expressed in seconds.
      example: 60
    ScoreSearchTerms:
      type: number
      description: |
        A quantitative value determined by the AI model representing the level of confidence that the results match your search terms.
      example: 90.5
    confidence:
      type: string
      description: |
        A qualitative indicator based on the value of the `score` field. This field can take one of the following values:
        - `high`
        - `medium`
        - `low`
        - `extremely low`
      example: high
    SearchItem:
      type: object
      description: |
        An object that contains the search results.
      properties:
        score:
          $ref: '#/components/schemas/ScoreSearchTerms'
        start:
          $ref: '#/components/schemas/StartTime'
        end:
          $ref: '#/components/schemas/EndTime'
        video_id:
          type: string
          description: A string representing the unique identifier of the video. Once the platform indexes a video, it assigns a unique identifier. Note that this is different from the identifier of the video indexing task.
          example: 639963a1ce36463e0199c8c7
        confidence:
          $ref: '#/components/schemas/confidence'
        thumbnail_url:
          $ref: '#/components/schemas/thumbnail_url'
      example:
        score: 85.08
        start: 515.4375
        end: 527
        video_id: 639963a1ce36463e0199c8c7
        confidence: high
        thumbnail_url: https://example.com/thumbnail.jpg
    thumbnail_url:
      type: string
      description: |
        If thumbnail generation has been enabled for this index, the platform returns a string representing the URL of the thumbnail. Note that the URL expires in one hour.
      example: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/639963a1ce36463e0199c8c7/516.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20221222%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20221222T134944Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=9e991f972f8a1baa647d7460685d99e20c4a27408406a972a4baf173a10b0102
    total_results:
      description: The total number of results.
      type: integer
      example: 10
    page:
      description: The page you retrieved.
      type: integer
      example: 1
    total_page:
      type: integer
      description: The total number of pages.
      example: 10
    limit_per_page_simple:
      type: integer
      description: The maximum number of items on each page.
      example: 10
    page_info:
      type: object
      description: Simple page information object that provides information about pagination.
      properties:
        limit_per_page:
          $ref: '#/components/schemas/limit_per_page_simple'
        page:
          $ref: '#/components/schemas/page'
        total_page:
          $ref: '#/components/schemas/total_page'
        total_results:
          $ref: '#/components/schemas/total_results'
      example:
        limit_per_page: 10
        page: 1
        total_page: 1
        total_results: 2
    total_inner_matches:
      type: integer
      description: |
        When grouping by video, the platform return this field that shows the total number of video clips matching your query.
      example: 10
    next_page_token:
      type: string
      description: The unique identifier of the next page.
      example: d1a8f7bd-31c8-4d55-9bb7-c1473de4b2dc-1
    prev_page_token:
      type: string
      description: The unique identifier of the previous page.
      example: e2b9f8ac-42d7-4e66-8cc9-d2584fb3a9e0-1
    SearchResults:
      description: |
        An object that contains your search results.
      type: object
      properties:
        data:
          type: array
          description: |
            An array that contains your search results. For each match found, the model returns the following fields:
          items:
            $ref: '#/components/schemas/SearchItem'
          example:
            - score: 85.08
              start: 515.4375
              end: 527
              video_id: 639963a1ce36463e0199c8c7
              confidence: high
              thumbnail_url: https://example.com/thumbnail.jpg
        page_info:
          type: object
          description: An object that provides information about pagination.
          properties:
            limit_per_page:
              type: integer
              description: |
                The maximum number of items on each page. When grouping by video, this field represents the maximum number of videos per page. Otherwise, it represents the maximum number of video clips per page.
              example: 10
            page_expires_at:
              type: string
              description: A string representing the date and time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), that the page expires.
              example: '2024-03-01T00:00:00Z'
            total_results:
              type: integer
              description: |
                The total number of results. When grouping by video, this field represents the total number of video clips matching your query. Otherwise , this field represents the total number of videos.
              example: 100
            total_inner_matches:
              $ref: '#/components/schemas/total_inner_matches'
            next_page_token:
              $ref: '#/components/schemas/next_page_token'
          example:
            limit_per_page: 10
            page_expires_at: '2024-03-01T00:00:00Z'
            total_results: 100
            next_page_token: d1a8f7bd-31c8-4d55-9bb7-c1473de4b2dc-1
        search_pool:
          $ref: '#/components/schemas/search_pool'
      example:
        search_pool:
          total_count: 10
          total_duration: 8731
          index_id: 639961c9e219c90227c371a2
        data:
          - score: 85.08
            start: 238.75
            end: 259.62109375
            video_id: 639963a1ce36463e0199c8c7
            confidence: high
            thumbnail_url: https://example.com/thumbnail.jpg
    search_pool:
      type: object
      description: An object that contains details about the index you queried.
      properties:
        total_count:
          type: integer
          description: The number of videos in the index you queried.
          example: 10
        total_duration:
          type: number
          description: The total duration of the videos.
          example: 10
        index_id:
          type: string
          description: The unique identifier of the index.
          example: 663da73b31cdd0c1f638a8e6
      example:
        total_count: 10
        total_duration: 10
        index_id: 663da73b31cdd0c1f638a8e6
    threshold_search:
      description: |
        Use this parameter to filter on the level of confidence that the results match your query.

        **Default:** `low`
      default: low
      enum:
        - high
        - medium
        - low
        - none
      type: string
      example: low
    Index:
      title: Index
      description: |
        An index groups one or more videos stored as vectors and is the most granular level at which you can perform a search.
      type: object
      properties:
        _id:
          type: string
          description: A string representing the unique identifier of the index. It is assigned by the API when an index is created.
          example: 663da73b31cdd0c1f638a8e6
        created_at:
          type: string
          description: A string representing the date and time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), that the index was created.
          example: '2024-03-01T00:00:00Z'
        updated_at:
          type: string
          description: A string representing the date and time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), that the index has been updated.
          example: '2024-03-01T00:00:00Z'
        expires_at:
          type: string
          description: |
            A string representing the date and time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), when your index will expire.

            If you're on the Free plan, the platform retains your index data for 90 days from creation. After this period, the platform deletes your index data, and this action cannot be undone. To continue using your index beyond this period, consider upgrading to the Developer plan, which offers unlimited index retention. For details, see the [Upgrade your plan](/docs/manage-your-plan#upgrade-your-plan) section.

            If you're on the Developer plan, this field is set to `null`, indicating no expiration.
          example: '2024-03-01T00:00:00Z'
        index_name:
          type: string
          description: A string representing the name of the index.
          example: My Index
        total_duration:
          type: number
          description: A number representing the total duration, in seconds, of the videos in the index.
          example: 10
        video_count:
          type: number
          description: The number of videos uploaded to this index.
          example: 10
        models:
          type: array
          description: An array containing the list of the [video understanding models](/docs/video-understanding-models) enabled for this index.
          items:
            type: object
            properties:
              model_name:
                type: string
                description: A string representing the name of the model.
                example: marengo2.7
              model_options:
                type: array
                description: |
                  An array of strings that contains the [model options](/docs/model-options) enabled for this index.
                items:
                  type: string
                  example: visual
                example:
                  - visual
            example:
              model_name: marengo2.7
              model_options:
                - visual
          example:
            - model_name: marengo2.7
              model_options:
                - visual
        addons:
          type: array
          description: The list of the add-ons that are enabled for this index.
          items:
            type: string
            example: thumbnail
          example:
            - thumbnail
      example:
        _id: 663da73b31cdd0c1f638a8e6
        created_at: '2024-03-01T00:00:00Z'
        updated_at: '2024-03-01T00:00:00Z'
        expires_at: '2024-03-01T00:00:00Z'
        index_name: My Index
        total_duration: 10
        video_count: 10
        models:
          - model_name: marengo2.7
            model_options:
              - visual
              - audio
        addons:
          - thumbnail
    VideoEmbeddingMetadata:
      description: |
        An object containing metadata associated with the embedding.
      allOf:
        - $ref: '#/components/schemas/BaseEmbeddingMetadata'
        - type: object
          properties:
            video_clip_length:
              type: number
              description: The duration for each clip in seconds, as specified by the `video_clip_length` parameter of the [`POST`](/reference/create-video-embedding-task) method of the `/embed/task` endpoint. Note that the platform automatically truncates video segments shorter than 2 seconds. For a 31-second video divided into 6-second segments, the final 1-second segment will be truncated. This truncation only applies to the last segment if it does not meet the minimum length requirement of 2 seconds.
              example: 6
            video_embedding_scope:
              type: array
              description: |
                The scope you've specified in the request. It can take one of the following values: ['clip'] or ['clip', 'video'].
              items:
                type: string
                example: clip
              example:
                - clip
            duration:
              type: number
              format: float
              description: The total duration of the video in seconds.
              example: 10
          example:
            input_filename: /Users/myuser/myvideo.mp4
            input_url: https://myvideo.com/myvideo.mp4
            video_clip_length: 6
            video_embedding_scope:
              - clip
            duration: 10
    VideoEmbeddingTask:
      description: |
        A video embedding task that describes the status of the task and the metadata about the video.
      title: Video Embedding Task
      type: object
      properties:
        _id:
          type: string
          description: |
            The unique identifier of the video embedding task.
          example: 663da73b31cdd0c1f638a8e6
        model_name:
          type: string
          description: |
            The name of the video understanding model the platform used to create the embedding.
          example: Marengo-retrieval-2.7
        status:
          type: string
          description: |
            A string indicating the status of the video indexing task. It can take one of the following values: `processing`, `ready` or `failed`.
          example: processing
        created_at:
          type: string
          format: date-time
          description: |
            The date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"), that the video embedding task was created.
          example: '2024-03-01T00:00:00Z'
        video_embedding:
          type: object
          description: |
            An object containing the metadata associated with the embedding.
          properties:
            metadata:
              $ref: '#/components/schemas/VideoEmbeddingMetadata'
          example:
            metadata:
              input_filename: /Users/myuser/myvideo.mp4
              input_url: https://myvideo.com/myvideo.mp4
              video_clip_length: 6
              video_embedding_scope:
                - clip
              duration: 10
      example:
        _id: 663da73b31cdd0c1f638a8e6
        model_name: Marengo-retrieval-2.7
        status: processing
        created_at: '2024-03-01T00:00:00Z'
        video_embedding:
          metadata:
            input_filename: /Users/myuser/myvideo.mp4
            input_url: https://myvideo.com/myvideo.mp4
            video_clip_length: 6
            video_embedding_scope:
              - clip
            duration: 10
    videoIndexingTask:
      description: |
        A video indexing task that describes the status of the task and the metadata about the video.
      title: Video Indexing Task
      type: object
      properties:
        _id:
          type: string
          description: |
            A string representing the unique identifier of the task. It is assigned by the platform when a new task is created.
          example: 663da73b31cdd0c1f638a8e6
        video_id:
          type: string
          description: |
            A string representing the unique identifier of the video associated with the specified video indexing task.
          example: 62a1ec6d9ea24f052b971a0f
        created_at:
          type: string
          description: |
            A string indicating the date and time, in the RFC [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"), that the task was created.
          example: '2024-03-01T00:00:00Z'
        updated_at:
          type: string
          description: |
            A string indicating the date and time, in the RFC [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"), that the task object was last updated. The platform updates this field every time the video indexing task transitions to a different state.
          example: '2024-03-01T00:00:00Z'
        status:
          type: string
          description: |
            A string indicating the status of the video indexing task. See the [Task object](/reference/the-task-object) page for a list of possible statuses.
          example: ready
        index_id:
          type: string
          description: |
            A string representing the unique identifier of the index to which the video must be uploaded.
          example: 663da73b31cdd0c1f638a8e6
        system_metadata:
          type: object
          description: |
            System-generated metadata about the video.
          properties:
            duration:
              type: number
              example: 10
            filename:
              type: string
              example: 01.mp4
            height:
              type: integer
              example: 480
            width:
              type: integer
              example: 854
          example:
            duration: 531.998133
            filename: 01.mp4
            height: 480
            width: 854
      example:
        _id: 663da73b31cdd0c1f638a8e6
        video_id: 62a1ec6d9ea24f052b971a0f
        created_at: '2024-03-01T00:00:00Z'
        updated_at: '2024-03-01T00:00:00Z'
        status: ready
        index_id: 630aff993fcee0532cb809d0
        system_metadata:
          duration: 531.998133
          filename: 01.mp4
          height: 480
          width: 854
        hls:
          video_url: https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/stream/c924f34a-144e-41df-bf2a-c693703fa134.m3u8
          thumbnail_urls:
            - https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/thumbnails/c924f34a-144e-41df-bf2a-c693703fa134.0000001.jpg
          status: COMPLETE
          updated_at: '2024-01-16T07:59:40.879Z'
    videoVector:
      description: |
        A video object that contains information about the video.
      title: Video Vector
      type: object
      properties:
        _id:
          type: string
          description: |
            A string representing the unique identifier of a video. The platform creates a new `video_vector` object and assigns it a unique identifier when the video has successfully been indexed. Note that video IDs are different from task IDs.
          example: 663da73b31cdd0c1f638a8e6
        created_at:
          type: string
          description: |
            A string indicating the date and time, in the RFC [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"), that the video indexing task was created.
          example: '2024-03-01T00:00:00Z'
        updated_at:
          type: string
          description: |
            A string indicating the date and time, in the RFC [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"), that the video indexing task object was last updated. The platform updates this field every time the video indexing task transitions to a different state.
          example: '2024-03-01T00:00:00Z'
        indexed_at:
          type: string
          description: |
            A string indicating the date and time, in the RFC [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"), that the video indexing task has been completed.
          example: '2024-03-01T00:00:00Z'
        system_metadata:
          type: object
          description: |
            System-generated metadata about the video.
          properties:
            filename:
              type: string
              example: 01.mp4
            duration:
              type: number
              example: 531.998133
            fps:
              type: number
              example: 741.875
            width:
              type: integer
              example: 640
            height:
              type: integer
              example: 360
            size:
              type: number
              example: 65749715
          example:
            filename: 01.mp4
            duration: 531.998133
            fps: 741.875
            width: 640
            height: 360
            size: 65749715
      example:
        _id: 663da73b31cdd0c1f638a8e6
        created_at: '2024-03-01T00:00:00Z'
        updated_at: '2024-03-01T00:00:00Z'
        indexed_at: '2024-03-01T00:00:00Z'
        metadata:
          filename: 01.mp4
          duration: 531.998133
          fps: 741.875
          width: 640
          height: 360
          size: 65749715
    HLSObject:
      description: The platform returns this object only for the videos that you uploaded with the `enable_video_stream` parameter set to `true`.
      title: HLS Object
      type: object
      properties:
        video_url:
          type: string
          description: A string representing the URL of the video. You can then use this URL to access the stream over the <a href="https://en.wikipedia.org/wiki/HTTP_Live_Streaming" target="_blank">HLS</a> protocol.
          example: https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/stream/c924f34a-144e-41df-bf2a-c693703fa134.m3u8
        thumbnail_urls:
          type: array
          description: An array containing the URL of the thumbnail.
          items:
            type: string
            example: https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/thumbnails/c924f34a-144e-41df-bf2a-c693703fa134.0000001.jpg
          example:
            - https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/thumbnails/c924f34a-144e-41df-bf2a-c693703fa134.0000001.jpg
            - https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/thumbnails/c924f34a-144e-41df-bf2a-c693703fa134.0000002.jpg
            - https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/thumbnails/c924f34a-144e-41df-bf2a-c693703fa134.0000003.jpg
        status:
          type: string
          description: A string representing the encoding status of the video file from its original format to a streamable format.
          example: ready
        updated_at:
          type: string
          description: A string indicating the date and time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), that the encoding status was last updated.
          example: '2024-01-09T11:17:15.296Z'
      example:
        video_url: https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/stream/c924f34a-144e-41df-bf2a-c693703fa134.m3u8
        thumbnail_urls:
          - https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/thumbnails/c924f34a-144e-41df-bf2a-c693703fa134.0000001.jpg
          - https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/thumbnails/c924f34a-144e-41df-bf2a-c693703fa134.0000002.jpg
          - https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/thumbnails/c924f34a-144e-41df-bf2a-c693703fa134.0000003.jpg
        status: ready
        updated_at: '2024-01-09T11:17:15.296Z'
  parameters:
    video-embedding-task-id:
      name: task_id
      in: path
      description: |
        The unique identifier of your video embedding task.
      required: true
      schema:
        type: string
        example: 663da73b31cdd0c1f638a8e6
    Content-Type:
      name: Content-Type
      in: header
      description: Must be set to `application/json`.
      required: true
      schema:
        type: string
        default: application/json
        example: application/json
    x-api-key:
      name: x-api-key
      in: header
      description: |
        Your API key.

        **NOTE:** You can find your API key on the <a href="https://playground.twelvelabs.io/dashboard/api-key" target="_blank">API Key</a> page.
      required: true
      schema:
        type: string
        example: tlk_1234567890
    bearer-token:
      name: Authorization
      in: header
      description: |
        Your bearer token.
      required: true
      schema:
        type: string
        example: Bearer 1234567890
    multipart:
      name: Content-Type
      in: header
      description: Must be set to `multipart/form-data`.
      required: true
      schema:
        type: string
        default: multipart/form-data
        example: multipart/form-data
    page:
      name: page
      in: query
      description: |
        A number that identifies the page to retrieve.

        **Default**: `1`.
      schema:
        type: integer
        default: 1
        example: 1
      required: false
    page_limit:
      name: page_limit
      in: query
      description: |
        The number of items to return on each page.

        **Default**: `10`.
        **Max**: `50`.
      schema:
        type: integer
        default: 10
        example: 10
      required: false
    sort_by:
      name: sort_by
      in: query
      description: |
        The field to sort on. The following options are available:
        - `updated_at`: Sorts by the time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), when the item was updated.
        - `created_at`: Sorts by the time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), when the item was created.

        **Default**: `created_at`.
      schema:
        type: string
        default: created_at
        example: created_at
      required: false
    sort_option:
      name: sort_option
      in: query
      description: |
        The sorting direction. The following options are available:
        - `asc`
        - `desc`

        **Default**: `desc`.
      schema:
        type: string
        default: desc
        example: desc
      required: false
    index_id:
      name: index_id
      in: query
      description: |
        Filter by the unique identifier of an index.
      schema:
        type: string
        example: 630aff993fcee0532cb809d0
      required: false
    task_status:
      name: status
      in: query
      description: |
        Filter by one or more video indexing task statuses. The following options are available:
        - `ready`: The video has been successfully uploaded and indexed.
        - `uploading`: The video is being uploaded.
        - `validating`: The video is being validated against the prerequisites.
        - `pending`: The video is pending.
        - `queued`: The video is queued.
        - `indexing`: The video is being indexed.
        - `failed`: The video indexing task failed.

        To filter by multiple statuses, specify the `status` parameter for each value:
        ```
        status=ready&status=validating
        ```
      schema:
        type: array
        items:
          type: string
          enum:
            - ready
            - uploading
            - validating
            - pending
            - queued
            - indexing
            - failed
          example: ready
        style: form
        explode: false
        example:
          - ready
          - failed
      required: false
    filename:
      name: filename
      in: query
      description: |
        Filter by filename.
      schema:
        type: string
        example: 01.mp4
      required: false
    duration:
      name: duration
      in: query
      description: |
        Filter by duration. Expressed in seconds.
      schema:
        type: number
        example: 531.998133
      required: false
    width:
      name: width
      in: query
      description: |
        Filter by width.
      schema:
        type: integer
        example: 640
      required: false
    height:
      name: height
      in: query
      description: |
        Filter by height.
      schema:
        type: integer
        example: 360
      required: false
    created_at:
      name: created_at
      in: query
      description: |
        Filter video indexing tasks by the creation date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"). The platform returns the video indexing tasks that were created on the specified date at or after the given time.
      schema:
        type: string
        example: '2024-03-01T00:00:00Z'
      required: false
    updated_at:
      name: updated_at
      in: query
      description: |
        Filter video indexing tasks by the last update date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ"). The platform returns the video indexing tasks that were updated on the specified date at or after the given time.
      schema:
        type: string
        example: '2024-03-01T00:00:00Z'
      required: false
    ended_at:
      name: ended_at
      description: |
        Retrieve the video embedding tasks that were created before the given date and time, expressed in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ").
      in: query
      schema:
        type: string
        example: '2024-03-01T00:00:00Z'
      required: false
    started_at:
      name: started_at
      description: |
        Retrieve the video embedding tasks that were created after the given date and time, expressed in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format ("YYYY-MM-DDTHH:mm:ssZ").
      in: query
      schema:
        type: string
        example: '2024-03-01T00:00:00Z'
      required: false
    embedding_tasks_filter_status:
      name: status
      description: Filter video embedding tasks by their current status. Possible values are `processing`, `ready`, or `failed`.
      in: query
      schema:
        type: string
        example: processing
      required: false
  headers:
    X-Ratelimit-Limit:
      schema:
        type: number
        example: 100
      description: The maximum number of requests you can make per rate limit window for this endpoint. For details, see the [Rate limits](/docs/rate-limits) page.
    X-Ratelimit-Remaining:
      schema:
        type: number
        example: 99
      description: The number of requests remaining in the current rate limit window for the specific endpoint.
    X-Ratelimit-Used:
      schema:
        type: number
        example: 1
      description: The number of requests you have made in the current rate limit window for the specific endpoint.
    X-Ratelimit-Reset:
      schema:
        type: number
        example: 1718777276
      description: The time at which the current rate limit window resets, expressed in UTC epoch seconds.
  responses:
    cloud-to-cloud-retrieve-import-logs-response:
      description: The import logs have successfully been retrieved.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                description: An array that contains the import logs.
                items:
                  $ref: '#/components/schemas/ImportLog'
                example:
                  - index_id: 66ed1ed7046a96796303a06f
                    index_name: my sample index
                    created_at: '2024-09-24T13:22:00Z'
                    ended_at: '2024-09-24T13:23:00Z'
                    video_status:
                      ready: 5
                      validating: 2
                      pending: 1
                      indexing: 3
                      failed: 2
                      queued: 0
                    failed_files:
                      - filename: VIDEO_3.mp4
                        error_message: Video indexing has failed. Please try again.
            example:
              data:
                - index_id: 66ed1ed7046a96796303a06f
                  index_name: my sample index
                  created_at: '2024-09-24T13:22:00Z'
                  ended_at: '2024-09-24T13:23:00Z'
                  video_status:
                    ready: 5
                    validating: 2
                    pending: 1
                    indexing: 3
                    failed: 2
                    queued: 0
                  failed_files:
                    - filename: VIDEO_3.mp4
                      error_message: Video indexing has failed. Please try again.
                - index_id: 66ed1ed7046a96796303a06f
                  index_name: my sample index
                  created_at: '2024-09-22T13:25:00Z'
                  ended_at: '2024-09-24T13:26:00Z'
                  video_status:
                    ready: 10
                    validating: 0
                    pending: 0
                    indexing: 0
                    failed: 3
                    queued: 0
                  failed_files:
                    - filename: VIDEO_3.mp4
                      error_message: No sound
    searchResultsResponsePageId:
      description: Successfully retrieved the specified page of search results.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/SearchResults'
              - type: object
                properties:
                  page_info:
                    type: object
                    description: An object that provides information about pagination.
                    properties:
                      limit_per_page:
                        type: integer
                        description: |
                          The maximum number of items on each page. When grouping by video, this field represents the maximum number of videos per page. Otherwise, it represents the maximum number of video clips per page.
                        example: 10
                      page_expires_at:
                        type: string
                        description: |
                          A string representing the date and time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), that the page expires.
                        example: '2024-03-01T00:00:00Z'
                      total_results:
                        type: integer
                        description: |
                          The total number of results. When grouping by video, this field represents the total number of video clips matching your query. Otherwise , this field represents the total number of videos.
                        example: 100
                      total_inner_matches:
                        $ref: '#/components/schemas/total_inner_matches'
                      next_page_token:
                        $ref: '#/components/schemas/next_page_token'
                      prev_page_token:
                        $ref: '#/components/schemas/prev_page_token'
                    example:
                      limit_per_page: 10
                      page_expires_at: '2024-03-01T00:00:00Z'
                      total_results: 100
                      next_page_token: d1a8f7bd-31c8-4d55-9bb7-c1473de4b2dc-1
                      prev_page_token: e2b9f8ac-42d7-4e66-8cc9-d2584fb3a9e0-1
                example:
                  page_info:
                    limit_per_page: 10
                    page_expires_at: '2024-03-01T00:00:00Z'
                    total_results: 100
                    next_page_token: d1a8f7bd-31c8-4d55-9bb7-c1473de4b2dc-1
                    prev_page_token: e2b9f8ac-42d7-4e66-8cc9-d2584fb3a9e0-1
            example:
              search_pool:
                total_count: 10
                total_duration: 8731
                index_id: 639961c9e219c90227c371a2
              data:
                - score: 85.08
                  start: 238.75
                  end: 259.62109375
                  video_id: 639963a1ce36463e0199c8c7
                  confidence: high
                  thumbnail_url: https://example.com/thumbnail.jpg
    noContentResponse:
      description: If successful, this method returns a `204 No Content` response code. It does not return anything in the response body.
    searchResultsResponse:
      description: Successfully performed a search request.
      headers:
        X-Ratelimit-Limit:
          $ref: '#/components/headers/X-Ratelimit-Limit'
        X-Ratelimit-Remaining:
          $ref: '#/components/headers/X-Ratelimit-Remaining'
        X-Ratelimit-Used:
          $ref: '#/components/headers/X-Ratelimit-Used'
        X-Ratelimit-Reset:
          $ref: '#/components/headers/X-Ratelimit-Reset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SearchResults'
          example:
            search_pool:
              total_count: 10
              total_duration: 8731
              index_id: 639961c9e219c90227c371a2
            data:
              - score: 85.08
                start: 238.75
                end: 259.62109375
                video_id: 639963a1ce36463e0199c8c7
                confidence: high
                thumbnail_url: https://example.com/thumbnail.jpg
    retrieveThumbnailResponse:
      description: A thumbnail has successfully been retrieved.
      content:
        application/json:
          schema:
            properties:
              thumbnail:
                type: string
                description: A string representing the URL of the thumbnail. Note that the URL expires in one hour.
                example: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/6320748774fed2f3511f2a92/10.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20220914%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20220914T075213Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=46b3bac13fb8b022313244780c238cb6bfc53eddcbee3be23a8d2dd22d99543e
          example:
            thumbnail: https://project-one-thumbnail.s3.us-west-2.amazonaws.com/6320748774fed2f3511f2a92/10.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAYRWJPOVHXE5SJ77T%2F20220914%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20220914T075213Z&X-Amz-Expires=86400&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=46b3bac13fb8b022313244780c238cb6bfc53eddcbee3be23a8d2dd22d99543e
    getVideoVectorsResponse:
      description: The video vectors in the specified index have successfully been retrieved.
      content:
        application/json:
          schema:
            properties:
              data:
                type: array
                description: An array that contains up to `page_limit` videos.
                items:
                  $ref: '#/components/schemas/videoVector'
                example:
                  - _id: 639963a1ce36463e0199c8c7
                    created_at: '2024-01-09T11:11:20.463Z'
                    updated_at: '2024-01-09T11:17:15.296Z'
                    indexed_at: '2024-01-09T11:17:15.296Z'
                    metadata:
                      duration: 8716.8969
                      filename: 01.mp4
              page_info:
                $ref: '#/components/schemas/page_info'
            example:
              data:
                - _id: 62a17bf847f5678267ec10cc
                  created_at: '2022-06-09T04:50:00.879Z'
                  index_id: 62a0906d47f5678267ec10a6
                  metadata:
                    duration: 531.998133
                    filename: 01.mp4
                    height: 400
                    width: 854
                  status: ready
                  updated_at: '2022-06-09T04:55:57.256Z'
                - _id: 62a17bce47f5678267ec10c6
                  created_at: '2022-06-09T04:49:20.001Z'
                  index_id: 62a0906d47f5678267ec10a6
                  metadata:
                    duration: 741.875
                    filename: 02.mp4
                    height: 480
                    width: 854
                  status: ready
                  updated_at: '2022-06-09T04:54:10.345Z'
              page_info:
                limit_per_page: 10
                page: 1
                total_page: 1
                total_results: 2
    getVideoVectorResponse:
      description: The specified video information has successfully been retrieved.
      content:
        application/json:
          schema:
            properties:
              _id:
                type: string
                description: The unique identifier of the video.
                example: 639963a1ce36463e0199c8c7
              created_at:
                type: string
                description: A string indicating the date and time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), that the video indexing task was created.
                example: '2024-01-09T11:11:20.463Z'
              updated_at:
                type: string
                description: A string indicating the date and time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), that the corresponding video indexing task was last updated. The platform updates this field every time the corresponding video indexing task transitions to a different state.
                example: '2024-01-09T11:17:15.296Z'
              indexed_at:
                type: string
                description: A string indicating the date and time, in the <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank">RFC 3339</a> format ("YYYY-MM-DDTHH:mm:ssZ"), that the video indexing task has been completed.
                example: '2024-01-09T11:17:15.296Z'
              system_metadata:
                type: object
                description: System-generated metadata about the video.
                properties:
                  duration:
                    type: number
                    example: 8716.8969
                  filename:
                    type: string
                    example: 01.mp4
                  fps:
                    type: number
                    example: 29.97002997002997
                  height:
                    type: integer
                    example: 400
                  width:
                    type: integer
                    example: 854
                example:
                  duration: 8716.8969
                  filename: 01.mp4
                  fps: 29.97002997002997
                  height: 400
                  width: 854
              hls:
                $ref: '#/components/schemas/HLSObject'
              embedding:
                type: object
                description: Contains the embedding and the associated information. The platform returns this field when the `embed` query parameter is set to `true` in the request.
                properties:
                  model_name:
                    type: string
                    description: The name of the video understanding model used to create the embedding.
                    example: Marengo-retrieval-2.7
                  video_embedding:
                    type: object
                    description: |
                      An object that contains the embeddings.
                    properties:
                      segments:
                        type: array
                        description: An array of objects that contains the embeddings for each individual segment.
                        items:
                          type: object
                          properties:
                            start_offset_sec:
                              type: number
                              format: float
                              description: |
                                The start time of the video segment for this embedding.
                              example: 0
                            end_offset_sec:
                              type: number
                              format: float
                              description: |
                                The end time of the video segment for this embedding.
                              example: 7.5666666
                            embedding_scope:
                              type: string
                              description: |
                                Indicates the scope of this embedding.
                              example: clip
                            float:
                              type: array
                              description: |
                                An array of floating point numbers representing the embeddings for each individual segment. Each segment is between 2 and 10 seconds. You can use this array with cosine similarity for various downstream tasks. Note that the example response was truncated for brevity.
                              items:
                                type: number
                                format: float
                                example: 0.032282468
                              example:
                                - -0.04747168
                                - 0.030509098
                                - 0.032282468
                          example:
                            start_offset_sec: 0
                            end_offset_sec: 7.5666666
                            embedding_scope: clip
                            float:
                              - -0.04747168
                              - 0.030509098
                              - 0.032282468
                        example:
                          - start_offset_sec: 0
                            end_offset_sec: 7.5666666
                            embedding_scope: clip
                            float:
                              - -0.04747168
                              - 0.030509098
                              - 0.032282468
                    example:
                      segments:
                        - start_offset_sec: 0
                          end_offset_sec: 7.5666666
                          embedding_scope: clip
                          float:
                            - -0.04747168
                            - 0.030509098
                            - 0.032282468
                example:
                  model_name: Marengo-retrieval-2.7
                  video_embedding:
                    segments:
                      - start_offset_sec: 0
                        end_offset_sec: 7.5666666
                        embedding_scope: clip
                        float:
                          - -0.04747168
                          - 0.030509098
                          - 0.032282468
            example:
              _id: 61e17be5777e6caec646fa07
              created_at: '2022-01-14T13:34:29Z'
              updated_at: '2022-01-14T13:34:29Z'
              indexed_at: '2022-01-14T14:05:55Z'
              metadata:
                duration: 3747.841667
                filename: IOKgzkakhlk.mp4
                fps: 29.97002997002997
                height: 360
                width: 482
              hls:
                video_url: https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/stream/c924f34a-144e-41df-bf2a-c693703fa134.m3u8
                thumbnail_urls:
                  - https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/thumbnails/c924f34a-144e-41df-bf2a-c693703fa134.0000001.jpg
                status: COMPLETE
                updated_at: '2024-01-16T07:59:40.879Z'
              embedding:
                model_name: Marengo-retrieval-2.7
                video_embedding:
                  segments:
                    - start_offset_sec: 0
                      end_offset_sec: 7.5666666
                      embedding_scope: clip
                      float:
                        - -0.04747168
                        - 0.030509098
                        - 0.032282468
    getIndexResponse:
      description: The specified index has successfully been retrieved.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Index'
          example:
            _id: 62d9bafa90077fc60af827a0
            index_name: myIndex
            created_at: '2024-01-09T11:11:20.463Z'
            updated_at: '2024-01-09T11:17:15.296Z'
            expires_at: '2024-04-08T11:11:20.463Z'
            video_count: 12
            total_duration: 8716.8969
            models:
              - model_name: marengo2.7
                model_options:
                  - visual
                  - audio
                addons:
                  - thumbnail
              - model_name: pegasus1.1
                model_options:
                  - visual
                  - audio
    getVideoIndexingTasksResponse:
      description: The video indexing tasks have successfully been retrieved.
      content:
        application/json:
          schema:
            properties:
              data:
                type: array
                description: An array that contains up to `page_limit` tasks.
                items:
                  $ref: '#/components/schemas/videoIndexingTask'
                example:
                  - _id: 62a17bf847f5678267ec10cc
                    created_at: '2022-06-09T04:50:00.879Z'
                    index_id: 62a0906d47f5678267ec10a6
                    metadata:
                      duration: 531.998133
                      filename: 01.mp4
                      height: 400
                      width: 854
              page_info:
                description: |
                  An object that provides information about pagination.
                type: object
                properties:
                  limit_per_page:
                    $ref: '#/components/schemas/limit_per_page_simple'
                  page:
                    $ref: '#/components/schemas/page'
                  total_page:
                    $ref: '#/components/schemas/total_page'
                  total_results:
                    $ref: '#/components/schemas/total_results'
                example:
                  limit_per_page: 10
                  page: 1
                  total_page: 1
                  total_results: 2
          example:
            data:
              - _id: 62a17bf847f5678267ec10cc
                created_at: '2022-06-09T04:50:00.879Z'
                index_id: 62a0906d47f5678267ec10a6
                metadata:
                  duration: 531.998133
                  filename: 01.mp4
                  height: 400
                  width: 854
                status: ready
                updated_at: '2022-06-09T04:55:57.256Z'
              - _id: 62a17bce47f5678267ec10c6
                created_at: '2022-06-09T04:49:20.001Z'
                index_id: 62a0906d47f5678267ec10a6
                metadata:
                  duration: 741.875
                  filename: 02.mp4
                  height: 480
                  width: 854
                status: ready
                updated_at: '2022-06-09T04:54:10.345Z'
            page_info:
              limit_per_page: 10
              page: 1
              total_page: 1
              total_results: 2
    getVideoIndexingTaskResponse:
      description: The specified video indexing task has successfully been retrieved.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/videoIndexingTask'
              - type: object
                properties:
                  hls:
                    $ref: '#/components/schemas/HLSObject'
                example:
                  hls:
                    video_url: https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/stream/c924f34a-144e-41df-bf2a-c693703fa134.m3u8
                    thumbnail_urls:
                      - https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/thumbnails/c924f34a-144e-41df-bf2a-c693703fa134.0000001.jpg
                    status: COMPLETE
                    updated_at: '2024-01-16T07:59:40.879Z'
          example:
            _id: 61e1789761c43d6d9b7362f3
            video_id: 61e1789761c43d6d9b7362f3
            created_at: '2022-01-14T13:20:22.986Z'
            updated_at: '2022-01-17T08:35:21.639Z'
            index_id: 61e165b061c43d6d9b73627b
            metadata:
              duration: 4334.0297
              filename: WPK3hvTr8PU.mp4
              height: 360
              width: 544
            status: ready
            hls:
              video_url: https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/stream/c924f34a-144e-41df-bf2a-c693703fa134.m3u8
              thumbnail_urls:
                - https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/thumbnails/c924f34a-144e-41df-bf2a-c693703fa134.0000001.jpg
              status: COMPLETE
              updated_at: '2024-01-16T07:59:40.879Z'
    getIndexesResponse:
      description: The indexes have successfully been retrieved.
      content:
        application/json:
          schema:
            properties:
              data:
                type: array
                description: An array that contains up to `page_limit` indexes.
                items:
                  $ref: '#/components/schemas/Index'
                example:
                  - _id: 62d85fe7340fa665f1fda5dd
                    index_name: index-01
                    created_at: '2024-01-09T11:11:20.463Z'
                    updated_at: '2024-01-09T11:17:15.296Z'
                    expires_at: '2024-04-08T11:11:20.463Z'
                    video_count: 2
                    total_duration: 1363.76
                    models:
                      - model_name: marengo2.7
                        model_options:
                          - visual
                          - audio
              page_info:
                $ref: '#/components/schemas/page_info'
            example:
              data:
                - _id: 62d85fe7340fa665f1fda5dd
                  index_name: index-01
                  created_at: '2024-01-09T11:11:20.463Z'
                  updated_at: '2024-01-09T11:17:15.296Z'
                  expires_at: '2024-04-08T11:11:20.463Z'
                  video_count: 2
                  total_duration: 1363.76
                  models:
                    - model_name: marengo2.7
                      model_options:
                        - visual
                        - audio
                      addons:
                        - thumbnail
                    - model_name: pegasus1.1
                      model_options:
                        - visual
                        - audio
                - _id: 62d858ee340fa665f1fda5d8
                  index_name: index-02
                  created_at: '2024-01-09T11:11:20.463Z'
                  updated_at: '2024-01-09T11:17:15.296Z'
                  expires_at: '2024-04-08T11:11:20.463Z'
                  video_count: 1
                  total_duration: 579.12
                  models:
                    - model_name: marengo2.7
                      model_options:
                        - visual
                      addons:
                        - thumbnail
                    - model_name: pegasus1.1
                      model_options:
                        - visual
                        - audio
              page_info:
                limit_per_page: 10
                page: 1
                total_page: 1
                total_results: 2
    createVideoIndexingTaskResponse:
      description: A video indexing task has successfully been created.
      content:
        application/json:
          schema:
            properties:
              _id:
                type: string
                description: A string representing the unique identifier of your video indexing task.
                example: 62a1ec6d9ea24f052b971a0f
              video_id:
                type: string
                description: A string representing the unique identifier of the video associated with the specified video indexing task.
                example: 62a1ec6d9ea24f052b971a0f
            example:
              _id: 62a1ec6d9ea24f052b971a0f
              video_id: 62a1ec6d9ea24f052b971a0f
    createIndexResponse:
      description: An index has successfully been created
      content:
        application/json:
          schema:
            properties:
              _id:
                type: string
                description: Represents the unique identifier of the `index` object.
                example: 62d85fe7340fa665f1fda5dd
            example:
              _id: 62d85fe7340fa665f1fda5dd
    searchResultsError:
      description: The request has failed.
      content:
        application/json:
          schema:
            type: object
            properties:
              error_code:
                type: integer
                description: |
                  Represents the code associated with the error. See the [Error codes](/reference/error-codes) page for details.
                example: 104
              message:
                type: string
                description: A human-readable string describing the error.
                example: The audio option of transcription is not allowed with multiple search options. You should use semantic instead.
            example:
              error_code: 104
              message: The audio option of transcription is not allowed with multiple search options. You should use semantic instead.
    insufficientFunds:
      description: The request has failed.
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                description: |
                  A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details.
                example: insufficient_funds
              message:
                type: string
                description: |
                  A human-readable string describing the error, intended to be suitable for display in a user interface.
                example: Not enough free credit. Please register a payment method or contact sales@twelvelabs.io.
              docs_url:
                type: string
                description: |
                  The URL of the relevant documentation page.
                example: https://docs.twelvelabs.io/reference/error-codes
          example:
            code: insufficient_funds
            message: Not enough free credit. Please register a payment method or contact sales@twelvelabs.io.
            docs_url: https://docs.twelvelabs.io/reference/error-codes
    unauthorizedRequest:
      description: Unauthorized request
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                description: |
                  A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details.
                example: unauthorized_request
              message:
                type: string
                description: |
                  A human-readable string describing the error, intended to be suitable for display in a user interface.
                example: You are not authorized to access this resource.
              docs_url:
                type: string
                description: |
                  The URL of the relevant documentation page.
                example: https://docs.twelvelabs.io/reference/error-codes
          example:
            code: unauthorized_request
            message: You are not authorized to access this resource.
            docs_url: https://docs.twelvelabs.io/reference/error-codes
    genericError:
      description: The request has failed.
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                description: |
                  A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details.
                example: generic_error
              message:
                type: string
                description: |
                  A human-readable string describing the error, intended to be suitable for display in a user interface.
                example: An error occurred.
              docs_url:
                type: string
                description: |
                  The URL of the relevant documentation page.
                example: https://docs.twelvelabs.io/reference/error-codes
            example:
              code: generic_error
              message: An error occurred.
              docs_url: https://docs.twelvelabs.io/reference/error-codes
    notFound:
      description: The specified resource does not exist.
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                description: |
                  Represents the code associated with the error. See the [Error codes](/reference/error-codes) page for details.
                example: not_found
              message:
                type: string
                description: A human-readable string describing the error.
                example: The specified resource does not exist.
            example:
              code: not_found
              message: The specified resource does not exist.
    createSyncEmbeddingResponse:
      description: |
        A text embedding has successfully been created.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EmbeddingResponse'
    retrieveVideoEmbeddingResponse:
      description: |
        Video embeddings have successfully been retrieved.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/VideoEmbeddingTask'
              - type: object
                properties:
                  video_embedding:
                    type: object
                    properties:
                      metadata:
                        $ref: '#/components/schemas/VideoEmbeddingMetadata'
                      segments:
                        type: array
                        description: |
                          An array of objects containing the embeddings for each video segment and the associated information.
                        items:
                          $ref: '#/components/schemas/VideoSegment'
                        example:
                          - start_offset_sec: 0
                            end_offset_sec: 6
                            embedding_scope: clip
                            float:
                              - -0.060086973
                              - 0.016479108
                    example:
                      metadata:
                        input_filename: 01.mp4
                        video_clip_length: 6
                        video_embedding_scope:
                          - clip
                          - video
                        duration: 18
                      segments:
                        - start_offset_sec: 0
                          end_offset_sec: 6
                          embedding_scope: clip
                          float:
                            - -0.060086973
                            - 0.016479108
                example:
                  _id: 663e16ac4d11aff765088b3a
                  model_name: Marengo-retrieval-2.7
                  status: ready
                  created_at: '2024-03-01T00:00:00Z'
                  video_embedding:
                    segments:
                      - start_offset_sec: 0
                        end_offset_sec: 6
                        embedding_scope: clip
                        float:
                          - -0.060086973
                          - 0.016479108
                      - start_offset_sec: 6
                        end_offset_sec: 12
                        embedding_scope: clip
                        float:
                          - -0.056660935
                          - 0.012404642
                      - start_offset_sec: 12
                        end_offset_sec: 18
                        embedding_scope: clip
                        float:
                          - -0.05971131
                          - -0.00859428
                      - start_offset_sec: 0
                        end_offset_sec: 18
                        embedding_scope: video
                        float:
                          - -0.05971131
                          - -0.00859428
                    metadata:
                      input_filename: 01.mp4
                      video_clip_length: 6
                      video_embedding_scope:
                        - clip
                        - video
                      duration: 18
          example:
            _id: 663e16ac4d11aff765088b3a
            model_name: Marengo-retrieval-2.7
            status: ready
            created_at: '2024-03-01T00:00:00Z'
            video_embedding:
              segments:
                - start_offset_sec: 0
                  end_offset_sec: 6
                  embedding_scope: clip
                  float:
                    - -0.060086973
                    - 0.016479108
                - start_offset_sec: 6
                  end_offset_sec: 12
                  embedding_scope: clip
                  float:
                    - -0.056660935
                    - 0.012404642
                - start_offset_sec: 12
                  end_offset_sec: 18
                  embedding_scope: clip
                  float:
                    - -0.05971131
                    - -0.00859428
                - start_offset_sec: 0
                  end_offset_sec: 18
                  embedding_scope: video
                  float:
                    - -0.05971131
                    - -0.00859428
              metadata:
                input_filename: 01.mp4
                video_clip_length: 6
                video_embedding_scope:
                  - clip
                  - video
                duration: 18
    listVideoEmbeddingTasksResponse:
      description: |
        A list of video embedding tasks has successfully been retrieved.
      content:
        application/json:
          schema:
            properties:
              data:
                type: array
                description: |
                  An array that contains up to `page_limit` video embedding tasks.
                items:
                  $ref: '#/components/schemas/VideoEmbeddingTask'
                example:
                  - _id: 66f537778d9641fe5a0d101f
                    model_name: Marengo-retrieval-2.7
                    status: processing
                    created_at: '2024-09-26T10:29:19.968Z'
                    video_embedding:
                      metadata:
                        input_filename: 01.mp4
                        video_clip_length: 6
                        video_embedding_scope:
                          - clip
                        duration: 13.4400001
                      segments:
                        - start_offset_sec: 0
                          end_offset_sec: 6
                          embedding_scope: clip
                          float:
                            - -0.060086973
                            - 0.016479108
              page_info:
                description: |
                  An object that provides information about pagination.
                type: object
                properties:
                  limit_per_page:
                    $ref: '#/components/schemas/limit_per_page_simple'
                  page:
                    $ref: '#/components/schemas/page'
                  total_page:
                    $ref: '#/components/schemas/total_page'
                  total_results:
                    $ref: '#/components/schemas/total_results'
                example:
                  limit_per_page: 10
                  page: 1
                  total_page: 1
                  total_results: 3
          example:
            data:
              - _id: 66f537778d9641fe5a0d101f
                model_name: Marengo-retrieval-2.7
                status: processing
                created_at: '2024-09-26T10:29:19.968Z'
                video_embedding:
                  metadata:
                    input_filename: 01.mp4
                    video_clip_length: 6
                    video_embedding_scope:
                      - clip
                    duration: 13.4400001
              - _id: 66f535874bd2802fc13293f4
                model_name: Marengo-retrieval-2.7
                status: processing
                created_at: '2024-09-26T10:21:04.157Z'
                video_embedding:
                  metadata:
                    input_filename: 01.mp4
                    video_clip_length: 6
                    video_embedding_scope:
                      - clip
                    duration: 13.4400001
              - _id: 66f534fd4bd2802fc13293ee
                model_name: Marengo-retrieval-2.7
                status: processing
                created_at: '2024-09-26T10:18:44.866Z'
                video_embedding:
                  metadata:
                    input_filename: 01.mp4
                    video_clip_length: 6
                    video_embedding_scope:
                      - clip
                    duration: 13.4400001
            page_info:
              page: 1
              limit_per_page: 10
              total_page: 1
              total_results: 3
    retrieveVideoEmbeddingTaskStatusResponse:
      description: |
        The status of your video embedding task has been retrieved.
      content:
        application/json:
          schema:
            properties:
              _id:
                type: string
                description: |
                  The unique identifier of the video embedding task.
                example: 6641c0efc70bb578439bd909
              status:
                type: string
                description: |
                  A string indicating the status of the video indexing task. It can take one of the following values: `processing`, `ready` or `failed`.
                example: processing
              model_name:
                type: string
                description: |
                  The name of the video understanding model the platform used to create the embedding.
                example: Marengo-retrieval-2.7
              video_embedding:
                type: object
                description: |
                  An object containing the metadata associated with the embedding.
                properties:
                  metadata:
                    $ref: '#/components/schemas/VideoEmbeddingMetadata'
                example:
                  metadata:
                    input_filename: /Users/myuser/myvideo.mp4
                    input_url: https://myvideo.com/myvideo.mp4
                    video_clip_length: 6
                    video_embedding_scope:
                      - clip
                    duration: 10
          example:
            _id: 6641c0efc70bb578439bd909
            model_name: Marengo-retrieval-2.7
            status: processing
            video_embedding:
              metadata:
                input_filename: 01.mp4
                video_clip_length: 6
                video_embedding_scope:
                  - clip
                  - video
                duration: 18
    createVideoEmbeddingTaskResponse:
      description: |
        A video embedding task has successfully been created.
      content:
        application/json:
          schema:
            properties:
              _id:
                type: string
                description: |
                  The unique identifier of the video embedding task. You can use the identifier to:
                  - Retrieve the status of your task by invoking the [`GET`](/reference/retrieve-video-embedding-task) method of the `/embed/tasks/{task_id}/status` endpoint.
                  - Retrieve the embedding by invoking the  [`GET`](/reference/retrieve-video-embedding) method of the `/embed/tasks/{task_id}` endpoint.
                example: 66419a20c70bb578439bd8f4
          example:
            _id: 66419a20c70bb578439bd8f4
    summarizeResponse:
      description: |
        The specified video has successfully been summarized.
      headers:
        X-Ratelimit-Limit:
          schema:
            type: number
          description: The maximum number of requests you can make per rate limit window for this endpoint. For details, see the [Rate limits](/docs/rate-limits) page.
          example: 100
        X-Ratelimit-Remaining:
          schema:
            type: number
          description: The number of requests remaining in the current rate limit window for the specific endpoint. This value decreases with each request you make to that endpoint and resets at the start of the next rate limit window.
          example: 99
        X-Ratelimit-Used:
          schema:
            type: number
          description: The number of requests you have made in the current rate limit window for the specific endpoint. This value increases with each request you make to that endpoint and resets to zero at the start of the next rate limit window.
          example: 1
        X-Ratelimit-Reset:
          schema:
            type: number
          description: The time at which the current rate limit window resets, expressed in UTC epoch seconds. After this time, the values of the `X-Ratelimit-Remaining` and `X-Ratelimit-Used` parameters will be reset to their initial values for the next rate limit window.
          example: 1718777276
      content:
        application/json:
          schema:
            oneOf:
              - type: object
                description: |
                  When the value of the `type` parameter is set to `summary`, the response is as follows:
                title: Summary
                properties:
                  id:
                    description: |
                      Unique identifier of the response.
                    type: string
                    example: 56dd2567-9b34-4ee9-9fbb-c20fc283e5bf
                  summary:
                    description: |
                      A brief report of the main points of the video.
                    type: string
                    example: |
                      Black Friday shoppers are shown in a mall, pushing and shoving through the crowds. A news reporter talks about shopping mania and its impact on stores. He mentions that stores are filled to the brim and that the hunt for deals can make people miserable. A woman talks to the camera about how people have lost their minds and how the American dream has become associated with material possessions.
                example:
                  id: 56dd2567-9b34-4ee9-9fbb-c20fc283e5bf
                  summary: Black Friday shoppers are shown in a mall, pushing and shoving through the crowds. A news reporter talks about shopping mania and its impact on stores. He mentions that stores are filled to the brim and that the hunt for deals can make people miserable. A woman talks to the camera about how people have lost their minds and how the American dream has become associated with material possessions.
              - type: object
                description: |
                  When the value of the `type` parameter is set to `chapter`, the response is as follows:
                title: Chapter
                properties:
                  id:
                    description: |
                      Unique identifier of the response.
                    type: string
                    example: da3cdd02-dff8-4712-a2a9-9b44f342c039
                  chapters:
                    description: |
                      An array that contains details about the detected chapters and their content.
                    type: array
                    items:
                      type: object
                      description: |
                        An object that contains details about a chapter. Each chapter has a unique number, start time, end time, title, and summary.
                      properties:
                        chapter_number:
                          description: |
                            Represents the sequence number of the chapter. Note that this field starts at 0. Ensure to interpret it accordingly in your application.
                          type: integer
                          example: 0
                        start:
                          description: |
                            The starting time of the chapter, measured in seconds from the beginning of the video.
                          type: integer
                          example: 0
                        end:
                          description: |
                            The ending time of the chapter, measured in seconds from the beginning of the video.
                          type: integer
                          example: 30
                        chapter_title:
                          description: |
                            The title of the chapter.
                          type: string
                          example: Graduation and Moving Home
                        chapter_summary:
                          description: |
                            A brief summary describing the content of the chapter.
                          type: string
                          example: The woman talks about her recent graduation and moving back home.
                      example:
                        chapter_number: 0
                        start: 15
                        end: 30
                        chapter_title: Graduation and Moving Home
                        chapter_summary: The woman talks about her recent graduation and moving back home.
                    example:
                      - chapter_number: 0
                        start: 15
                        end: 30
                        chapter_title: Graduation and Moving Home
                        chapter_summary: The woman talks about her recent graduation and moving back home.
                      - chapter_number: 1
                        start: 30
                        end: 45
                        chapter_title: Outdoor Adventures
                        chapter_summary: The woman discusses spending time outdoors and getting a tan.
                      - chapter_number: 2
                        start: 45
                        end: 60
                        chapter_title: Shopping Hauls
                        chapter_summary: The woman talks about her recent shopping spree and purchases.
                example:
                  id: 663da73b31cdd0c1f638a8e6
                  chapters:
                    - chapter_number: 0
                      start: 15
                      end: 30
                      chapter_title: Graduation and Moving Home
                      chapter_summary: The woman talks about her recent graduation and moving back home.
              - type: object
                description: |
                  When the value of the `type` parameter is set to `highlight`, the response is as follows:
                title: Highlight
                properties:
                  id:
                    description: |
                      Unique identifier of the response.
                    type: string
                    example: 2f2a504f-6956-446c-84d8-29d86f793c66
                  highlights:
                    description: |
                      An array that contains the highlights.
                    type: array
                    items:
                      type: object
                      description: |
                        An object that provides a brief snapshot of a specific part of the video.
                      properties:
                        start:
                          description: |
                            The starting time of the highlight, measured in seconds from the beginning of the video.
                          type: integer
                          example: 0
                        end:
                          description: |
                            The ending time of the highlight, measured in seconds from the beginning of the video.
                          type: integer
                          example: 30
                        highlight:
                          description: |
                            The tile of the highlight.
                          type: string
                          example: A woman vlogs about her summer day, sharing her experience while standing in her childhood home in Minnesota.
                        highlight_summary:
                          type: string
                          description: |
                            A brief description that captures the essence of this part of the video.
                          example: The woman talks about her love for getting some sun, despite not tanning well, and shows the camera around her house, mentioning her fake tanner.
                      example:
                        start: 0
                        end: 30
                        highlight: A woman vlogs about her summer day, sharing her experience while standing in her childhood home in Minnesota.
                        highlight_summary: The woman talks about her love for getting some sun, despite not tanning well, and shows the camera around her house, mentioning her fake tanner.
                    example:
                      - start: 0
                        end: 30
                        highlight: A woman vlogs about her summer day, sharing her experience while standing in her childhood home in Minnesota.
                        highlight_summary: The woman talks about her love for getting some sun, despite not tanning well, and shows the camera around her house, mentioning her fake tanner.
                      - start: 30
                        end: 60
                        highlight: A woman is making a video of her food preparation and tasting.
                        highlight_summary: A woman demonstrates how to make a delicious bread salad with tomatoes and cheese while explaining the process.
                example:
                  id: 663da73b31cdd0c1f638a8e6
                  highlights:
                    - start: 0
                      end: 30
                      highlight: A woman vlogs about her summer day, sharing her experience while standing in her childhood home in Minnesota.
                      highlight_summary: The woman talks about her love for getting some sun, despite not tanning well, and shows the camera around her house, mentioning her fake tanner.
          example:
            id: 663da73b31cdd0c1f638a8e6
            highlights:
              - start: 0
                end: 30
                highlight: A woman vlogs about her summer day, sharing her experience while standing in her childhood home in Minnesota.
                highlight_summary: The woman talks about her love for getting some sun, despite not tanning well, and shows the camera around her house, mentioning her fake tanner.
    gistResponse:
      description: |
        The gist of the specified video has successfully been generated.
      headers:
        X-Ratelimit-Limit:
          schema:
            type: number
          description: The maximum number of requests you can make per rate limit window for this endpoint. For details, see the [Rate limits](/docs/rate-limits) page.
          example: 100
        X-Ratelimit-Remaining:
          schema:
            type: number
          description: The number of requests remaining in the current rate limit window for the specific endpoint. This value decreases with each request you make to that endpoint and resets at the start of the next rate limit window.
          example: 99
        X-Ratelimit-Used:
          schema:
            type: number
          description: The number of requests you have made in the current rate limit window for the specific endpoint. This value increases with each request you make to that endpoint and resets to zero at the start of the next rate limit window.
          example: 1
        X-Ratelimit-Reset:
          schema:
            type: number
          description: The time at which the current rate limit window resets, expressed in UTC epoch seconds. After this time, the values of the `X-Ratelimit-Remaining` and `X-Ratelimit-Used` parameters will be reset to their initial values for the next rate limit window.
          example: 1718777276
      content:
        application/json:
          schema:
            type: object
            description: |
              When the value of the `type` parameter is set to `summary`, the response is as follows:
            title: Summary
            properties:
              id:
                description: |
                  Unique identifier of the response.
                type: string
                example: 56dd2567-9b34-4ee9-9fbb-c20fc283e5bf
              title:
                description: |
                  Suggested title for the video.
                type: string
                example: |
                  From Consumerism to Minimalism: A Journey Toward Sustainable Living
              topics:
                description: |
                  An array of topics that are relevant to the video.
                type: array
                items:
                  type: string
                  example: Shopping Vlog Lifestyle
                example:
                  - Shopping Vlog Lifestyle
                  - Minimalism Lifestyle
                  - Sustainable Living
              hashtags:
                description: |
                  An array of hashtags that are relevant to the video.
                type: array
                items:
                  type: string
                  example: '#BlackFriday'
                example:
                  - '#BlackFriday'
                  - '#Vlog'
            example:
              id: 56dd2567-9b34-4ee9-9fbb-c20fc283e5bf
              title: 'From Consumerism to Minimalism: A Journey Toward Sustainable Living'
              topics:
                - Shopping Vlog Lifestyle
                - Minimalism Lifestyle
                - Sustainable Living
              hashtags:
                - '#BlackFriday'
                - '#Vlog'
    cloud-to-cloud-import-videos-response:
      description: |
        An import has successfully been initiated.
      content:
        application/json:
          schema:
            type: object
            properties:
              failed_files:
                type: array
                description: A list of the video files that failed to import. Typically, these files did not meet the upload requirements. To resolve this, review the requirements listed in the [Prerequisites](/docs/upload-single-videos#prerequisites) section of the **Upload single videos page**.
                items:
                  type: object
                  properties:
                    filename:
                      type: string
                      description: The filename of the video that failed to be imported.
                      example: 1.mp4
                    error_message:
                      type: string
                      description: The error message if the import failed.
                      example: The video is too big. Please use a video with a size less than %s. The current size is %s.
                  example:
                    filename: 1.mp4
                    error_message: The video is too big. Please use a video with a size less than %s. The current size is %s.
                example:
                  - filename: 1.mp4
                    error_message: The video is too big. Please use a video with a size less than %s. The current size is %s.
              videos:
                type: array
                items:
                  type: object
                  properties:
                    video_id:
                      type: string
                      description: |
                        The unique identifier of a video. This identifier serves a dual purpose:
                        - It identifies the video itself.
                        - It identifies the associated video indexing task.

                        For example, due to this dual functionality, you can use this identifier to:
                        - Retrieve details about the video itself by invoking the [`GET`](/reference/retrieve-video-information) method of the `/indexes/{index-id}/videos/{video-id}` endpoint.
                        - Retrieve the status of the video indexing task by invoking the [`GET`](/reference/retrieve-video-indexing-task) method of the `/tasks/{task_id}` endpoint.
                      example: 66fcee250f9f7bcce21915a2
                    filename:
                      type: string
                      description: The filename of the video.
                      example: 1.mp4
                  example:
                    video_id: 66fcee250f9f7bcce21915a2
                    filename: 1.mp4
                description: A list of the videos that will be uploaded and indexed.
                example:
                  - video_id: 66fcee250f9f7bcce21915a2
                    filename: 1.mp4
          example:
            failed_files:
              - filename: 1.mp4
                error_message: The video is too big. Please use a video with a size less than %s. The current size is %s.
            videos:
              - video_id: 66fcee250f9f7bcce21915a2
                filename: 1.mp4
    cloud-to-cloud-retrieve-status-response:
      description: |
        The status for each video from the specified integration and index has successfully been retrieved
      content:
        application/json:
          schema:
            type: object
            properties:
              not_imported:
                type: array
                items:
                  type: string
                  example: NEW_VIDEO_1.mp4
                description: An array of filenames that haven't yet been imported.
                example:
                  - NEW_VIDEO_1.mp4
                  - NEW_VIDEO_2.mp4
              validating:
                type: array
                items:
                  $ref: '#/components/schemas/VideoItem'
                description: An array of videos that are being validated.
                example:
                  - video_id: 66fcee250f9f7bcce21915a2
                    filename: 1.mp4
                    created_at: '2024-09-24T13:22:00Z'
              pending:
                type: array
                items:
                  $ref: '#/components/schemas/VideoItem'
                description: An array of videos that are pending.
                example:
                  - video_id: 66fcee250f9f7bcce21915a2
                    filename: 1.mp4
                    created_at: '2024-09-24T13:22:00Z'
              queued:
                type: array
                items:
                  $ref: '#/components/schemas/VideoItem'
                description: An array of videos that are queued for import.
                example:
                  - video_id: 66fcee250f9f7bcce21915a2
                    filename: 1.mp4
                    created_at: '2024-09-24T13:22:00Z'
              indexing:
                type: array
                items:
                  $ref: '#/components/schemas/VideoItem'
                description: An array of videos that are being indexed.
                example:
                  - video_id: 66fcee250f9f7bcce21915a2
                    filename: 1.mp4
                    created_at: '2024-09-24T13:22:00Z'
              ready:
                type: array
                items:
                  $ref: '#/components/schemas/VideoItem'
                description: An array of videos that have successfully been imported.
                example:
                  - video_id: 66fcee250f9f7bcce21915a2
                    filename: 1.mp4
                    created_at: '2024-09-24T13:22:00Z'
              failed:
                type: array
                items:
                  $ref: '#/components/schemas/VideoItemFailed'
                description: An array of videos that failed to import.
                example:
                  - filename: 1.mp4
                    created_at: '2024-09-24T13:22:00Z'
                    error_message: The video is too big. Please use a video with a size less than %s. The current size is %s.
          example:
            not_imported:
              - NEW_VIDEO_1.mp4
              - NEW_VIDEO_2.mp4
            ready:
              - video_id: VIDEO_ID_1
                filename: VIDEO_1.mp4
                created_at: '2024-09-24T13:22:00Z'
              - video_id: VIDEO_ID_2
                filename: VIDEO_2.mp4
                created_at: '2024-09-24T13:22:00Z'
            pending:
              - video_id: VIDEO_ID_3
                filename: VIDEO_3.mp4
                created_at: '2024-09-24T13:22:00Z'
            failed:
              - filename: VIDEO_4.mp4
                created_at: '2024-09-24T13:22:00Z'
                error_message: The file is not a valid video file.
    StreamGenerateResponse:
      type: object
      title: Streamed generate response
      description: |
        When the value of the `stream` parameter is set to `true`, the platform provides a streaming response in the NDJSON format.

        The stream contains three types of events:
        1. Stream start
        2. Text generation
        3. Stream end

        To integrate the response into your application, follow the guidelines below:
        - Parse each line of the response as a separate JSON object.
        - Check the `event_type` field to determine how to handle the event.
        - For `text_generation` events, process the `text` field as it arrives. Depending on your application's requirements, this may involve displaying the text incrementally, storing it for later use, or performing any tasks.
        - Use the `stream_start` and `stream_end` events to manage the lifecycle of your streaming session.
      oneOf:
        - $ref: '#/components/responses/StreamStartResponse'
        - $ref: '#/components/responses/StreamTextResponse'
        - $ref: '#/components/responses/StreamEndResponse'
      examples:
        stream-start-response:
          summary: Stream start
          value:
            event_type: stream_start
            metadata:
              generation_id: 2f6d0bdd-aed8-47b1-8124-3c9d8006cdc9
        text-generation-response:
          summary: Text generation
          value:
            event_type: text_generation
            text: light-hearted moments of cats
        stream-end-response:
          summary: Stream end
          value:
            event_type: stream_end
            metadata:
              generation_id: 2f6d0bdd-aed8-47b1-8124-3c9d8006cdc9
    StreamStartResponse:
      type: object
      title: Stream start
      description: |
        Indicates the beginning of the stream.
      properties:
        event_type:
          type: string
          description: |
            This field is always set to `stream_start` for this event.
          example: stream_start
        metadata:
          type: object
          description: An object containing metadata about the stream.
          properties:
            generation_id:
              type: string
              description: |
                A unique identifier for the generation session.
              example: 2f6d0bdd-aed8-47b1-8124-3c9d8006cdc9
          example:
            generation_id: 2f6d0bdd-aed8-47b1-8124-3c9d8006cdc9
    StreamTextResponse:
      type: object
      title: Text generation
      description: |
        Contains a fragment of generated text. Note that text fragments may be split at arbitrary points, not necessarily at word or sentence boundaries.
      properties:
        event_type:
          type: string
          description: |
            This field is always set to `text_generation` for this event.
          example: text_generation
        text:
          type: string
          description: |
            A fragment of the generated text.
          example: light-hearted moments of cats
    StreamEndResponse:
      type: object
      title: Stream end
      description: |
        Indicates the end of the stream.
      properties:
        event_type:
          type: string
          description: |
            This field is always set to `stream_end` for this event.
          example: stream_end
        metadata:
          type: object
          description: An object containing metadata about the stream.
          properties:
            generation_id:
              type: string
              description: |
                The same unique identifier provided in the `stream_start` event.
              example: 2f6d0bdd-aed8-47b1-8124-3c9d8006cdc9
          example:
            generation_id: 2f6d0bdd-aed8-47b1-8124-3c9d8006cdc9
    NonStreamGenerateResponse:
      type: object
      title: Non-streamed response
      description: |
        When the value of the `stream` parameter is set to `false`, the response is as follows:
      properties:
        id:
          description: |
            Unique identifier of the response.
          type: string
          example: 2f6d0bdd-aed8-47b1-8124-3c9d8006cdc9
        data:
          description: |
            The generated text based on the prompt you provided.
          type: string
          example: 1. Vlog\n2. Minnesota\n3. Mall of America\n4. Shopping haul\n5. Outdoor adventure
  requestBodies:
    createSyncEmbeddingRequest:
      description: |
        Request to create an embedding synchronously.
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            required:
              - model_name
            properties:
              model_name:
                type: string
                description: |
                  The name of the model you want to use. The following models are available:
                    - `Marengo-retrieval-2.7`
                example: Marengo-retrieval-2.7
              text:
                type: string
                description: |
                  The text for which you wish to create an embedding.

                  **NOTE**:
                  Text embeddings are limited to 77 tokens. If the text exceeds this limit, the platform truncates it according to the value of the `text_truncate` parameter described below.

                  **Example**: "Man with a dog crossing the street"
                example: Man with dog crossing the steet
              text_truncate:
                type: string
                description: |
                  Specifies how the platform truncates text that exceeds 77 tokens to fit the maximum length allowed for an embedding.
                  This parameter can take one of the following values:
                  - `start`: The platform will truncate the start of the provided text.
                  - `end`: The platform will truncate the end of the provided text.
                  - `none`: The platform will return an error if the text is longer than the maximum token limit.

                  **Default**: `end`
                default: end
                example: end
              image_url:
                type: string
                format: uri
                description: |
                  The publicly accessible URL of the image for which you wish to create an embedding. This parameter is required for image embeddings if `image_file` is not provided.
                example: https://example.com/image.jpg
              image_file:
                type: string
                format: binary
                description: |
                  The image file for which you wish to create an embedding as a local file. This parameter is required for image embeddings if `image_url` is not provided.
                example: /Users/john/Documents/image.jpg
              audio_url:
                type: string
                format: uri
                description: |
                  The publicly accessible URL of the audio file for which you wish to creae an emebdding. This parameter is required for audio embeddings if `audio_file` is not provided.
                example: https://example.com/audio.mp3
              audio_file:
                type: string
                format: binary
                description: |
                  The audio file for which you wish to create an embedding as a local file. This parameter is required for audio embeddings if `audio_url` is not provided.
                example: /Users/john/Documents/audio.mp3
              audio_start_offset_sec:
                type: number
                description: |
                  Specifies the start time, in seconds, from which the platform generates the audio embeddings. This parameter allows you to skip the initial portion of the audio during processing.
                  **Default**: `0`.
                default: 0
                example: 0
          examples:
            text-embedding:
              summary: Text embedding
              value:
                model_name: Marengo-retrieval-2.7
                text: Man with a dog crossing the street
            image-embedding-url:
              summary: Image embedding using URL
              value:
                model_name: Marengo-retrieval-2.7
                image_url: https://example.com/image.jpg
            image-embedding-file:
              summary: Image embedding using local file
              value:
                model_name: Marengo-retrieval-2.7
                image_file: /Users/john/Documents/image.jpg
            audio-embedding-url:
              summary: Audio embedding using URL
              value:
                model_name: Marengo-retrieval-2.7
                audio_url: https://example.com/audio.mp3
            audio-embedding-file:
              summary: Audio embedding using local file
              value:
                model_name: Marengo-retrieval-2.7
                audio_file: /Users/john/Documents/audio.mp3
            text-embedding-with-truncation:
              summary: Text embedding with truncation
              value:
                model_name: Marengo-retrieval-2.7
                text: This is a very long text that might exceed the token limit and need truncation
                text_truncate: start
    createVideoEmbeddingTaskRequest:
      description: |
        Request to create a video embedding task.
      content:
        multipart/form-data:
          schema:
            type: object
            required:
              - model_name
            properties:
              model_name:
                type: string
                description: |
                  The name of the model you want to use. The following models are available:
                    - `Marengo-retrieval-2.7`
                example: Marengo-retrieval-2.7
              video_file:
                type: string
                format: binary
                description: |
                  Specify this parameter to upload a video from your local file system.
                example: /Users/john/Documents/video.mp4
              video_url:
                type: string
                description: |
                  Specify this parameter to upload a video from a publicly accessible URL.
                example: https://example.com/video.mp4
              video_start_offset_sec:
                type: number
                format: float
                description: |
                  The start offset in seconds from the beginning of the video where processing should begin. Specifying 0 means starting from the beginning of the video.

                  **Default**: 0
                  **Min**: 0
                  **Max**: Duration of the video minus video_clip_length
                example: 0
              video_end_offset_sec:
                type: number
                format: float
                description: |
                  The end offset in seconds from the beginning of the video where processing should stop.

                  Ensure the following when you specify this parameter:
                  - The end offset does not exceed the total duration of the video file.
                  - The end offset is greater than the start offset.
                  - You must set both the start and end offsets. Setting only one of these offsets is not permitted, resulting in an error.

                  **Min**: video_start_offset + video_clip_length
                  **Max**: Duration of the video file
                example: 60
              video_clip_length:
                type: number
                format: integer
                description: |
                  The desired duration in seconds for each clip for which the platform generates an embedding. Ensure that the clip length does not exceed the interval between the start and end offsets.

                  **Default**: 6
                  **Min**: 2
                  **Max**: 10
                example: 6
              video_embedding_scope:
                type: string
                description: |
                  Defines the scope of video embedding generation. Valid values are the following:
                  - `clip`: Creates embeddings for each video segment of `video_clip_length` seconds, from `video_start_offset_sec` to `video_end_offset_sec`.
                  - `clip` and `video`: Creates embeddings for video segments and the entire video.

                  To create embeddings for segments and the entire video in the same request, include this parameter twice as shown below:

                  ```json
                  --form video_embedding_scope=clip \
                  --form video_embedding_scope=video
                  ```

                  **Default**: `clip`
                default: clip
                example: clip
          examples:
            video-embedding-clip:
              summary: Video embedding using clip scope
              value:
                model_name: Marengo-retrieval-2.7
                video_embedding_scope: clip
                video_file: /Users/john/Documents/video.mp4
    generateTextRepresentationRequest:
      description: |
        Request to generate a text representation of a video.
      required: true
      content:
        application/json:
          schema:
            type: object
            example:
              video_id: 6298d673f1090f1100476d4c
              prompt: I want to generate a description for my video with the following format - Title of the video, followed by a summary in 2-3 sentences, highlighting the main topic, key events, and concluding remarks.
              temperature: 0.7
              stream: true
            required:
              - video_id
              - prompt
            properties:
              video_id:
                type: string
                description: The unique identifier of the video for which you wish to generate a text.
                example: 6298d673f1090f1100476d4c
              prompt:
                type: string
                description: |
                  A prompt that guides the model on the desired format or content.

                  **NOTES**:
                    - Even though the model behind this endpoint is trained to a high degree of accuracy, the preciseness of the generated text may vary based on the nature and quality of the video and the clarity of the prompt.
                    - Your prompts can be instructive or descriptive, or you can also phrase them as questions.
                    - The maximum length of a prompt is 1500 characters.

                  **Examples**:

                    - Based on this video, I want to generate five keywords for SEO (Search Engine Optimization).
                    - I want to generate a description for my video with the following format: Title of the video, followed by a summary in 2-3 sentences, highlighting the main topic, key events, and concluding remarks.
                example: I want to generate a description for my video with the following format- Title of the video, followed by a summary in 2-3 sentences, highlighting the main topic, key events, and concluding remarks.
              temperature:
                type: number
                format: float
                description: |
                  Controls the randomness of the text output generated by the model. A higher value generates more creative text, while a lower value produces more deterministic text output.

                  **Default:** 0.7
                  **Min:** 0
                  **Max:** 1
                default: 0.7
                example: 0.7
                maximum: 1
                minimum: 0
              stream:
                type: boolean
                description: |
                  Set this parameter to `true` to enable streaming responses in the <a href="https://github.com/ndjson/ndjson-spec" target="_blank">NDJSON</a> format.

                  **Default:** `true`
                default: true
                example: true
    summarizeRequest:
      description: |
        Request to generate a summary of a video.
      content:
        application/json:
          schema:
            type: object
            required:
              - video_id
              - type
            properties:
              video_id:
                type: string
                description: |
                  The unique identifier of the video that you want to summarize.
                example: 6298d673f1090f1100476d4c
              type:
                type: string
                description: |
                  Specifies the type of summary. Use one of the following values:
                    - `summary`: A brief that encapsulates the key points of a video, presenting the most important information clearly and concisely.
                    - `chapter`: A chronological list of all the chapters in a video, providing a granular breakdown of its content. For each chapter, the platform returns its starting and end times, measured in seconds from the beginning of the video clip, a descriptive headline that offers a brief of the events or activities within that part of the video, and an accompanying summary that elaborates on the headline.
                    - `highlight`: A chronologically ordered list of the most important events within a video. Unlike chapters, highlights only capture the key moments, providing a snapshot of the video's main topics. For each highlight, the platform returns its starting and end times, measured in seconds from the beginning of the video, a title, and a brief description that captures the essence of this part of the video.
                example: summary
              prompt:
                type: string
                description: |
                  Use this field to provide context for the summarization task, such as the target audience, style, tone of voice, and purpose.

                  **NOTES**:
                    - Your prompts can be instructive or descriptive, or you can also phrase them as questions.
                    - The maximum length of a prompt is 1500 characters.

                  **Example**: Generate a summary of this video for a social media post, up to two sentences.
                example: Generate a summary of this video for a social media post, up to two sentences.
              temperature:
                type: number
                format: float
                description: |
                  Controls the randomness of the text output generated by the model. A higher value generates more creative text, while a lower value produces more deterministic text output.

                  **Default:** 0.7
                  **Min:** 0
                  **Max:** 1
                default: 0.7
                example: 0.7
                maximum: 1
                minimum: 0
            example:
              video_id: 6298d673f1090f1100476d4c
              type: summary
              prompt: Generate a summary of this video for a social media post, up to two sentences.
              temperature: 0.7
    gistRequest:
      description: |
        Request to generate a gist for a video.
      content:
        application/json:
          schema:
            type: object
            required:
              - video_id
              - types
            properties:
              video_id:
                type: string
                description: |
                  The unique identifier of the video that you want to generate a gist for.
                example: 6298d673f1090f1100476d4c
              types:
                type: array
                items:
                  type: string
                  enum:
                    - title
                    - topics
                    - hashtags
                  example: title
                description: |
                  Specifies the type of gist. Use one of the following values:
                    - `title`: A title succinctly captures a video's main theme, such as "From Consumerism to Minimalism: A Journey Toward Sustainable Living," guiding viewers to its content and themes.
                    - `topics`: A topic is the central theme of a video, such as "Shopping Vlog Lifestyle", summarizing its content for efficient categorization and reference.
                    - `hashtags`: A hashtag, like "#BlackFriday", represents key themes in a video, enhancing its discoverability and categorization on social media platforms.
                example:
                  - title
                  - topics
            example:
              video_id: 6298d673f1090f1100476d4c
              types:
                - title
                - topics
    update-video-vector:
      description: |
        Request to update the metadata of a video.
      content:
        application/json:
          schema:
            type: object
            properties:
              user_metadata:
                type: object
                description: |
                  Metadata that helps you categorize your videos. You can specify a list of keys and values. Keys must be of type `string`, and values can be of the following types: `string`, `integer`, `float` or `boolean`.

                  **NOTES:**
                  -  If you want to store other types of data such as objects or arrays,  you must convert your data into string values.
                  - You cannot override any of the predefined metadata (example: duration, width, length, etc) associated with a video.
                additionalProperties: {}
                example:
                  filename: 01.mp4
                  category: recentlyAdded
                  batchNumber: 5
                  rating: 9.3
                  needsReview: true
            example:
              user_metadata:
                filename: 01.mp4
                category: recentlyAdded
                batchNumber: 5
                rating: 9.3
                needsReview: true
    any-to-video-search:
      description: |
        Request to perform a search on a video index.
      content:
        multipart/form-data:
          encoding:
            search_options:
              style: form
              explode: true
          schema:
            required:
              - index_id
              - search_options
            type: object
            properties:
              query_media_type:
                type: string
                description: |
                  The type of media you wish to use. This parameter is required for media queries. For example, to perform an image-based search, set this parameter to `image`.
                enum:
                  - image
                example: image
              query_media_url:
                type: string
                description: |
                  The publicly accessible URL of the media file you wish to use. This parameter is required for media queries if `query_media_file` is not provided.
                example: https://example.com/image.jpg
              query_media_file:
                description: |
                  The media you wish to use as a local file. This parameter is required for media queries if `query_media_url` is not provided.
                type: string
                format: binary
                example: /Users/john/Documents/image.jpg
              query_text:
                type: string
                description: |
                  The text query to search for. This parameter is required for text queries. Note that the platform supports full natural language-based search.
                example: A man walking a dog
              index_id:
                type: string
                description: |
                  The unique identifier of the index to search.
                example: 6298d673f1090f1100476d4c
              search_options:
                type: array
                items:
                  type: string
                  enum:
                    - visual
                    - audio
                  example: visual
                description: |
                  Specifies the [sources of information](/docs/search-options) the platform uses when performing a search. You must include the `search_options` parameter separately for each desired source of information.

                  **NOTES:**
                  - The search options you specify must be a subset of the [model options](/docs/model-options) used when you created the index.
                  - You can specify multiple search options in conjunction with the `operator` parameter described below to broaden or narrow your search.

                  Example:
                  To search using both visual and audio cues, include this parameter twice in the request as shown below:
                  ```JSON
                  --form search_options=visual \
                  --form search_options=audio \
                  ```
                example:
                  - visual
                  - audio
              adjust_confidence_level:
                type: number
                format: float
                description: |
                  This parameter specifies the strictness of the thresholds for assigning the high, medium, or low confidence levels to search results. If you use a lower value, the thresholds become more relaxed, and more search results will be classified as having high, medium, or low confidence levels. You can use this parameter to include a broader range of potentially relevant video clips, even if some results might be less precise.

                  **Min**: 0
                  **Max**: 1
                  **Default:** 0.5
                default: 0.5
                example: 0.5
              group_by:
                type: string
                description: |
                  Use this parameter to group or ungroup items in a response. It can take one of the following values:
                  - `video`:  The platform will group the matching video clips in the response by video.
                  - `clip`: The matching video clips in the response will not be grouped.

                  **Default:** `clip`
                enum:
                  - video
                  - clip
                default: clip
                example: clip
              threshold:
                $ref: '#/components/schemas/threshold_search'
              sort_option:
                type: string
                description: |
                  Use this parameter to specify the sort order for the response.

                  When performing a search, the platform determines the level of confidence that each video clip matches your search terms. By default, the search results are sorted on the level of confidence in descending order.

                  If you set this parameter to `score` and `group_by` is set to `video`, the platform will determine the maximum value of the `score` field for each video and sort the videos in the response by the maximum value of this field. For each video, the matching video clips will be sorted by the level of confidence.

                  If you set this parameter to `clip_count` and `group_by` is set to `video`, the platform will sort the videos in the response by the number of clips. For each video, the matching video clips will be sorted by the level of confidence. You can use `clip_count` only when the matching video clips are grouped by video.


                  **Default:** `score`
                enum:
                  - score
                  - clip_count
                default: score
                example: score
              operator:
                type: string
                description: |
                  When you perform a search specifying multiple [sources of information](/docs/search-options), you can use the this parameter to broaden or narrow your search.

                    The following logical operators are supported:

                    - `or`

                    - `and`

                    For details and examples, see the [Using multiple sources of information](/docs/search-single-queries#using-multiple-sources-of-information) section.


                    **Default**: `or`.
                enum:
                  - or
                  - and
                example: or
                default: or
              page_limit:
                type: integer
                description: |
                  The number of items to return on each page. When grouping by video, this parameter represents the number of videos per page. Otherwise, it represents the maximum number of video clips per page.

                  **Max**: `50`.
                default: 10
                example: 10
              filter:
                type: string
                description: |
                  This parameter accepts a stringified object to filter search results:
                  - For string fields: Use the exact match operator (`=`) to return results that exactly equal the specified value. Syntax: `"field": "value"`.
                  - For numeric fields: Use either exact match (`=`) or comparison operators (`gte`, `lte`) for arithmetic comparisons Syntax: `"field": number` or `"field": { "gte": number, "lte": number }`.

                  The filter object can contain the following properties:
                  - `id`: An array of strings to filter by specific video IDs. Example: `"id": ["video1", "video2"]`.
                  - `duration`: An object to filter your search results based on the duration of the video containing the segment that matches your query. Example: `"duration": { "gte": 600, "lte": 800 }`.
                  - `width`: A numeric value to filter by video width. Example: `"width": 1920` or `"width": { "gte": 1280, "lte": 1920 }`
                  - `height`: A numeric value to filter by video height. Example: `"height": 1080` or `"height": { "gte": 720, "lte": 1080 }`.
                  - `size`: A numeric value to filter by video size in bytes. Example: `"size": 1048576` or `"size": { "gte": 1048576, "lte": 5242880 }`.
                  - `filename`: A string value to filter by file name. Example: `"filename": "Animal Encounters part 1"`.

                  To enable filtering by custom fields:
                  1. Add metadata to your video by calling the the [`PUT`](/reference/update-video-information) method of the `/indexes/:index-id/videos/:video-id` endpoint
                  2. Use the custom fields as filter criteria in your queries. For example, to return only videos where a custom field named `needsReview` of type boolean is `true`, use: `"needs_review": true`.

                  For more details and examples, see the [Filter search results based on metadata](/docs/filtering-search-results) page.
                example: '{"id":["66284191ea717fa66a274832"]}'
            example:
              index_id: 6298d673f1090f1100476d4c
              search_options:
                - visual
              query_text: A man walking a dog
              adjust_confidence_level: 0.5
              group_by: clip
              sort_option: score
              operator: or
              page_limit: 10
              filter: '{"id":["66284191ea717fa66a274832"]}'
    cloud-to-cloud-import-videos-request:
      description: |
        Request to import videos from a cloud storage bucket to an index.
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - index_id
            properties:
              index_id:
                type: string
                description: |
                  The unique identifier of the index to which the videos are being uploaded.
                example: 6298d673f1090f1100476d4c
              incremental_import:
                type: boolean
                description: |
                  Specifies whether or not incremental sync is enabled. If set to `false`, the platform will synchronize all the files in the bucket.

                  **Default**: `true`.
                default: true
              retry_failed:
                type: boolean
                description: |
                  Determines whether the platform retries failed uploads. When set to `true`, the platform attempts to re-upload files that failed during the initial upload process.

                  **Default**: `false`.
                default: false
              user_metadata:
                type: object
                description: |
                  Metadata that helps you categorize your videos. You can specify a list of keys and values. Keys must be of type `string`, and values can be of the following types: `string`, `integer`, `float` or `boolean`.

                  **NOTES:**
                  - The metadata you specify when calling this method applies to all videos imported in this request.
                  -  If you want to store other types of data such as objects or arrays, you must convert your data into string values.
                  - You cannot override any of the predefined metadata (example: duration, width, length, etc) associated with a video.
                additionalProperties: {}
                example:
                  category: recentlyAdded
                  batchNumber: 5
            example:
              index_id: 6298d673f1090f1100476d4c
              incremental_import: true
              retry_failed: false
              user_metadata:
                category: recentlyAdded
                batchNumber: 5
    createVideoIndexingTask:
      description: |
        Request to upload a video to an index.
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            required:
              - index_id
            properties:
              index_id:
                type: string
                description: |
                  The unique identifier of the index to which the video is being uploaded.
                example: 6298d673f1090f1100476d4c
              provide_transcription:
                type: boolean
                description: |
                  A boolean value specifying whether or not you provide a transcription for this video.
                default: false
              language:
                type: string
                description: Must be set to `en`.
                default: en
                example: en
              video_file:
                type: string
                format: binary
                description: |
                  Specify this parameter to upload a video from your local file system.
                example: s3://twelve-labs-docs/01.mp4
              transcription_file:
                type: string
                format: binary
                description: |
                  When the `provide_transcription` parameter is set to `true`, and you want to provide a transcription from the local file system, use the `transcription_file` parameter to pass your transcription file to the platform. It must be a stream of bytes encoded as `multipart/form-data`. The transcription must be in the SRT or VTT format.
                example: s3://twelve-labs-docs/01.srt
              video_url:
                type: string
                description: |
                  Specify this parameter to upload a video from a publicly accessible URL.
                example: https://example.com/01.mp4
              transcription_url:
                type: string
                description: |
                  When the `provide_transcription` parameter is set to `true`, and you want to provide a transcription from a publicly accessible URL, use the `transcription_url` parameter to specify the URL of your transcription. The transcription must be in the SRT or VTT format.
                example: https://example.com/01.srt
              enable_video_stream:
                type: boolean
                description: |
                  This parameter indicates if the platform stores the video for streaming. When set to `true`, the platform stores the video, and you can retrieve its URL by calling the [`GET`](/reference/retrieve-video-information) method of the `/indexes/{index-id}/videos/{video-id}` endpoint. You can then use this URL to access the stream over the <a href="https://en.wikipedia.org/wiki/HTTP_Live_Streaming" target="_blank">HLS</a> protocol.
                default: true
          example:
            index_id: 6298d673f1090f1100476d4c
            provide_transcription: false
            language: en
            video_file: '@/Users/john/Documents/01.mp4'
    updateIndex:
      description: |
        Request to update the name of an index.
      content:
        application/json:
          schema:
            type: object
            required:
              - index_name
            properties:
              index_name:
                type: string
                description: |
                  The name of the index.
                example: myIndex
          example:
            index_name: myIndex
    createIndex:
      description: |
        Request to create an index.
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - models
              - index_name
            properties:
              index_name:
                type: string
                description: |
                  The name of the index. Make sure you use a succinct and descriptive name.
                example: myIndex
              models:
                type: array
                description: |
                  An array that specifies the [video understanding models](/docs/video-understanding-models) and the [model options](/docs/model-options) to be enabled for this index. This determines how the platform processes your videos.
                items:
                  type: object
                  required:
                    - model_name
                    - model_options
                  properties:
                    model_name:
                      type: string
                      description: |
                        The name of the model. The following models are available:

                          - **Embedding**: These models are proficient at performing tasks such as search and classification, enabling enhanced video understanding.

                            - `marengo2.7`

                          - **Generative**: These models generate text based on your videos.

                            - `pegasus1.1`

                        **NOTE:** You cannot change the models once the index has been created.

                        For more details, see the [Video understanding models](/docs/video-understanding-models) page.
                      example: marengo2.7
                    model_options:
                      type: array
                      description: |
                        An array that specifies how the platform will process the videos uploaded to this index. For more details, see the [model options](/docs/model-options) page.
                        For the Marengo and Pegasus models, you should specify one or both of the following model options: `visual` and `audio`.
                      items:
                        type: string
                        example: visual
                      minItems: 1
                      maxItems: 2
                      example:
                        - visual
                        - audio
                  example:
                    model_name: marengo2.7
                    model_options:
                      - visual
                      - audio
                example:
                  - model_name: marengo2.7
                    model_options:
                      - visual
                      - audio
              addons:
                type: array
                description: |
                  An array specifying which add-ons should be enabled. Each entry in the array is an addon, and the following values are supported:
                  - `thumbnail`: Enables [thumbnail generation](/docs/extract-video-data#retrieve-thumbnails).

                  If you don't provide this parameter, no add-ons will be enabled.

                  **NOTES:**
                  - You can only enable addons when using the Marengo video understanding model.
                  - You cannot disable an add-on once the index has been created.
                items:
                  type: string
                  example: thumbnail
                minItems: 1
                maxItems: 1
                example:
                  - thumbnail
          example:
            index_name: myIndex
            models:
              - model_name: marengo2.7
                model_options:
                  - visual
                  - audio
              - model_name: pegasus1.1
                model_options:
                  - visual
                  - audio
            addons:
              - thumbnail
x-readme:
  samples-languages:
    - http
    - curl
    - python
    - go
    - node
